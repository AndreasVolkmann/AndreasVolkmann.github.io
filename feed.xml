<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://andreasvolkmann.github.io//feed.xml" rel="self" type="application/atom+xml" /><link href="https://andreasvolkmann.github.io//" rel="alternate" type="text/html" hreflang="en" /><updated>2021-08-05T15:54:27+02:00</updated><id>https://andreasvolkmann.github.io//feed.xml</id><title type="html">Andreas Volkmann</title><subtitle>A personal page for showcasing projects and talking about my interests.
</subtitle><author><name>Andreas Volkmann</name><email>avolkmann@me.com</email></author><entry><title type="html">Language features across the boundary</title><link href="https://andreasvolkmann.github.io//blog/2021-07-25-topic-markers-in-language-design/" rel="alternate" type="text/html" title="Language features across the boundary" /><published>2021-07-25T00:00:00+02:00</published><updated>2021-07-25T00:00:00+02:00</updated><id>https://andreasvolkmann.github.io//blog/topic-markers-in-language-design</id><content type="html" xml:base="https://andreasvolkmann.github.io//blog/2021-07-25-topic-markers-in-language-design/">&lt;p&gt;In western languages we are used to repeatedly re-declare the topic we are talking about.
There is hardly a sentence without a pronoun,
and we often have to find &lt;a href=&quot;https://owl.purdue.edu/owl/general_writing/academic_writing/sentence_variety/for_repeated_subjects_or_topics.html&quot;&gt;creative ways&lt;/a&gt;
to reduce repetition, in order not to sound dry and robotic.&lt;/p&gt;

&lt;p&gt;Imagine a typical conversation between person &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;How is your new teacher?&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;I don't like him. He's too strict.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Is he worse than Mr. X?&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;No, but he still thinks it's the 80s.&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This could go on for quite a bit,
but after the first sentence it should be clear to everyone what the topic is.
Then why do we have to repeatedly refer to it?&lt;/p&gt;

&lt;p&gt;Think about introducing yourself to an audience.
Nobody is in doubt who you are talking about, 
yet practically every sentence will contain an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Growing up with such a language, this feels normal. 
Although, as developers, we tend to get an allergic reaction when seeing excessive repetition.&lt;/p&gt;

&lt;p&gt;Once we discover an elegant alternative, 
we realize that languages like English, German, Danish are really quite verbose. 
They are said to be &lt;a href=&quot;https://en.wikipedia.org/wiki/Topic-prominent_language&quot;&gt;subject-prominent&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;topic-markers&quot;&gt;Topic markers&lt;/h1&gt;

&lt;p&gt;Some natural languages, like Japanese and Korean, support a feature called &lt;a href=&quot;https://en.wikipedia.org/wiki/Topic_marker&quot;&gt;topic markers&lt;/a&gt;.
They allow you to declare a topic, and then largely omit referencing it throughout the conversation.&lt;/p&gt;

&lt;p&gt;Going back to the previous example, once the topic is established, we can stop referring to it.&lt;/p&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;How is new teacher?&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Don't like. Too strict.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Worse than Mr. X?&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;No, but still thinks it's the 80s.&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This sounds unnatural in English, but is the default in Japanese.
In fact, we can omit nearly all pronouns, as they are usually inferred from the context:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;When &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; asks &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; a question, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; is not in doubt whose teacher &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; is talking about.&lt;/li&gt;
  &lt;li&gt;When &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; states her opinion, both know who about.&lt;/li&gt;
  &lt;li&gt;As long as the topic doesn’t change, there is no need to refer to the teacher with pronouns.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;implicit-topics&quot;&gt;Implicit topics&lt;/h2&gt;
&lt;p&gt;Context-heavy languages assume a lot of implicit information, allowing for very succinct communication.
Japanese is known for being on the extreme end of the context-heavy scala, 
as almost every sentence will omit some information.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In high context cultures many of the words you might think of as essential in another linguistic setting become unnecessary or out of place. Japanese is one such language, where things are often implied by context and mutual understanding.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://www.italki.com/article/877/omitting-the-subject-in-japanese?hl=en&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Japanese_grammar#Thematic_wa&quot;&gt;A classic&lt;/a&gt; 
is the sentence &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;僕はウナギだ&lt;/code&gt;, which can be interpreted as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I am an eel&lt;/code&gt;, which doesn’t make much sense.
The implicit context is that we are in a restaurant, where the sentence is used to state your order, 
as in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I'd like the eel, please&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;More generally, you omit pronouns in most conversations.
When talking about yourself, stating your thoughts, or telling a story about your kids, you won’t have to 
 say &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I&lt;/code&gt; / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my&lt;/code&gt;. Once you open your mouth, it is clear that you are the topic.
When seeing a colleague and asking a question, you won’t say &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;You&lt;/code&gt;. 
The other person understands that he is the one being asked.&lt;/p&gt;

&lt;p&gt;Once I went to a book store, where a band was playing. 
Just as I entered, they stopped playing, 
and I went up to one of the members to ask whether they would continue later.
The entire conversation was:&lt;/p&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;Me&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;もう終わった？&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ~ Already finished?&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;He&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;まだ。&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# ~ Still.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I was taken aback by the curtness of his answer, but this is really quite common.&lt;/p&gt;

&lt;h1 id=&quot;programming-analog&quot;&gt;Programming analog&lt;/h1&gt;

&lt;p&gt;The first similar concept that comes to mind is a plain class, 
from which we can reference other members of the class without qualification.&lt;/p&gt;

&lt;p&gt;As mentioned, in Japanese you can omit declaring yourself as the topic.
Let’s imagine a class about ourselves, called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;think&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;about&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;think&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No more subject!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;think&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Context is awesome!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As opposed to:&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;think&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;therefore I am&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;think&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;repetition is boring&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Generally, good design will produce classes with low subject repetition.
Similar to how we organize our prose to minimize repetition and keep the reader engaged. 
If we find ourselves frequently referring to the same subject, 
then that is a sign that the code belongs in a (topic) class.&lt;/p&gt;

&lt;p&gt;This works well when we own the class, but what if the topic is out of our control?&lt;/p&gt;

&lt;h2 id=&quot;extension-functions-with-receivers&quot;&gt;Extension functions with receivers&lt;/h2&gt;

&lt;p&gt;Have you ever had to write a function which operates on an external type, like the below?&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mutate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;external&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;External&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;external&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Test&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;external&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10_000&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;external&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getCurrentLocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;external&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;external&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yetAnotherField&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;/// 10 more fields to set&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is super annoying. We basically want a way to declare &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;external&lt;/code&gt; as our topic, 
and then stop referring to it in every single line, as if it was a function of the class itself.&lt;/p&gt;

&lt;p&gt;In Kotlin, &lt;a href=&quot;https://kotlinlang.org/docs/extensions.html#extension-functions&quot;&gt;extension functions&lt;/a&gt; 
are declared by defining a receiver type for the function.
Within its scope, the receiver becomes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this&lt;/code&gt;, and can be omitted.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;External&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mutate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Test&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10_000&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getCurrentLocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Such receivers can be thought of as topic markers, 
indicating that the following block of code will invoke the topic without explicitly referencing it.&lt;/p&gt;

&lt;p&gt;The standard library contains generic helper functions, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apply&lt;/code&gt; to facilitate this inline.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;setLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Hello A, B!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Without &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apply&lt;/code&gt;, we would have to declare the subject in every line, sometimes even twice.
We could actually create a similar helper for the Japanese topic marker &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;は&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;infix&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;は(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;RestaurantOrder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;は&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unagi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Receivers are frequently leveraged to enable custom DSLs / &lt;a href=&quot;https://kotlinlang.org/docs/type-safe-builders.html&quot;&gt;type-safe builders&lt;/a&gt;. 
For example, a type-safe way to build html in code:&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;stylesheet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;textColumn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OK&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;footer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Another cool thing here is the notion of nested receivers / topics, just as in natural language.
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;textColumn&lt;/code&gt; only makes sense in the context of a form in a body in html.&lt;/p&gt;

&lt;p&gt;Going back to the eel example, how could we express this in code?
First, we can always assume an implicit context of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I&lt;/code&gt;.
Next, we are in a restaurant and, facing the waiter, it is clear that we intend to order food.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RestaurantOrder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unagi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Menu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;EelOnRice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// implicit I&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;restaurant&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// when in restaurant&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// when about to order&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;unagi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// when in the right context, a single word is sufficient&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Notice that we can define &lt;a href=&quot;https://kotlinlang.org/docs/extensions.html#declaring-extensions-as-members&quot;&gt;local extensions&lt;/a&gt;! 
This really allows us to express the concept of sub-topics, 
i.e. the unagi restaurant order only applies to me.&lt;/p&gt;

&lt;h3 id=&quot;further-parallels&quot;&gt;Further parallels&lt;/h3&gt;
&lt;p&gt;In Japanese, adding back the omitted subject references still leads to grammatically correct sentences,
but they will be perceived as awkward, and you will have trouble making yourself understood.
This is analogous to unclean code with excessive duplication, or unnecessary qualifications.
For others reading your code, this noise is an impairment to understanding your true intent.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;In programming, topics are generally handled by defining classes of cohesive members, 
which can operate on the topic without explicit references. 
Kotlin adds the magic by allowing the same behavior on external types via extensions.
Bonus points for local extensions!&lt;/p&gt;

&lt;p&gt;Natural languages like Japanese have a special topic marker particle 
which feels similar to defining the receiver on an extension function.
In context-heavy languages we can omit a lot of implicit information, 
often leading to much shorter, concise sentences.&lt;/p&gt;

&lt;p&gt;To me, both Kotlin and Japanese have a sense of elegance, 
as it is super easy to produce highly expressive and concise output.&lt;/p&gt;</content><author><name>Andreas Volkmann</name><email>avolkmann@me.com</email></author><category term="blog" /><summary type="html">In western languages we are used to repeatedly re-declare the topic we are talking about. There is hardly a sentence without a pronoun, and we often have to find creative ways to reduce repetition, in order not to sound dry and robotic.</summary></entry><entry><title type="html"></title><link href="https://andreasvolkmann.github.io//blog/2021-07-24-/" rel="alternate" type="text/html" title="" /><published>2021-07-24T00:00:00+02:00</published><updated>2021-07-24T00:00:00+02:00</updated><id>https://andreasvolkmann.github.io//blog/</id><content type="html" xml:base="https://andreasvolkmann.github.io//blog/2021-07-24-/">&lt;p&gt;Languages should encourage best practices via language design.&lt;/p&gt;

&lt;h1 id=&quot;primary-constructors&quot;&gt;Primary Constructors&lt;/h1&gt;
&lt;p&gt;https://github.com/dotnet/csharplang/blob/main/proposals/primary-constructors.md&lt;/p&gt;

&lt;p&gt;In C#, it is easier to declare a public property with getter+setter,
than a class dependency.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommandHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommandHandler&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Database&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CommandHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Database&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;file-scoped-namespaces&quot;&gt;File-scoped namespaces&lt;/h1&gt;
&lt;p&gt;https://github.com/dotnet/csharplang/blob/main/proposals/csharp-10.0/file-scoped-namespaces.md&lt;/p&gt;

&lt;p&gt;https://github.com/dotnet/csharplang/blob/main/proposals/declaration-expressions.md&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Andreas Volkmann</name><email>avolkmann@me.com</email></author><category term="blog" /><summary type="html">Languages should encourage best practices via language design.</summary></entry><entry><title type="html">Good Language Design Scoping copy</title><link href="https://andreasvolkmann.github.io//blog/2021-07-24-good-language-design-scoping-Copy/" rel="alternate" type="text/html" title="Good Language Design Scoping copy" /><published>2021-07-24T00:00:00+02:00</published><updated>2021-07-24T00:00:00+02:00</updated><id>https://andreasvolkmann.github.io//blog/good-language-design-scoping%20-%20Copy</id><content type="html" xml:base="https://andreasvolkmann.github.io//blog/2021-07-24-good-language-design-scoping-Copy/">&lt;p&gt;In natural languages there are different degrees of context, ranging from low to high, 
correlated to &lt;a href=&quot;https://en.wikipedia.org/wiki/High-context_and_low-context_cultures#Examples_of_higher-_and_lower-context_cultures&quot;&gt;high- and low-context cultures&lt;/a&gt;).
Highly context-based languages allow for very succinct communication, 
since conversations assume a lot of implicit information. 
One example being that references to the topic and/or subject can be either wholly omitted, 
or drastically reduced.&lt;/p&gt;

&lt;p&gt;With a western background, it is initially difficult to understand such languages, 
because European languages are mostly low-context and more grammar / syntax heavy. 
German is a good example of a very verbose language with tons of grammatical rules and cases, 
making it one of the more dreaded languages for students out there.
Almost everything has to be conjugated based on tense, number, or gender.&lt;/p&gt;

&lt;p&gt;In contrast to this syntax-heavy grammar, Asian languages feel like a fresh breeze.
If German makes you feel like it is almost overloaded with grammar, 
then Chinese feels like no grammar at all.
No tense, no grammatical number, no gender, no nothing!&lt;/p&gt;

&lt;p&gt;When trying to formulate a sentence in Chinese, 
I am frequently surprised by how easy and straight-forward it is.
Generally, once you learn a new word, 
you can immediately start using it in all kinds of situations without a second thought.
This is truly a liberating feeling, and makes language-learning fun again.&lt;/p&gt;

&lt;p&gt;On the other hand, when learning a new word in a language like French, 
students frequently have issues remembering the correct gender, or have trouble parsing 
a verb in futur proche. 
I remember something with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aura&lt;/code&gt;, 
but it’s clear that my class never really mastered french verb conjugation, even after many years of school.
On top of that there’s all the special cases, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;animal&lt;/code&gt; &amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;animaux&lt;/code&gt;.
Sure, you can remember all that. But why? And how is that enjoyable?&lt;/p&gt;

&lt;p&gt;Even for nordic languages, like Danish or Swedish, which are far less grammar-dependent, you have to
take some time to get a feeling for whether a noun is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;en&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;et&lt;/code&gt;, since there is no rule.&lt;/p&gt;

&lt;h1 id=&quot;safe-languages&quot;&gt;Safe languages&lt;/h1&gt;
&lt;p&gt;An analog in programming languages could be low- and high-level languages.
In low-level languages you usually have to write more explicit code to convey the same intent. 
In exchange, you get to provide more detailed instructions.
High-level languages rely on conventions and abstractions to facilitate a safe and expressive syntax.&lt;/p&gt;

&lt;p&gt;Looking at the history of programming languages, 
we have learned that restricting what a user can and has to do improves code, and the software we produce.
Famous examples are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;goto considered harmful&lt;/code&gt;, immutable &amp;gt; mutable data, the billion dollar mistake, etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://imgs.xkcd.com/comics/goto.png&quot; alt=&quot;Goto considered harmful comic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Eliminating entire classes of errors seems to be the way to go.&lt;/p&gt;

&lt;p&gt;Why do we need safe languages? Are they only for beginners? Can’t we just put the pros to work?
No, because &lt;strong&gt;there aren’t enough pros&lt;/strong&gt;. 
The amount of programmers doubles every couple of years, 
meaning that there will always be more juniors than seniors.&lt;/p&gt;

&lt;p&gt;Consequently, we need languages which prevent us from making common mistakes.
If you are passionate about programming, you may think that the others should just bring the same passion,
or find something else to do. 
But obviously there is a vast market need for programmers, whilst supply is dwindling.
As other occupations become less lucrative / extinct, more people will have to turn towards programming,
all the while not being interested in the craft.
This doesn’t mean that these people lack the intelligence to write good software. 
There are tons of highly-intelligent PHDs, 
who couldn’t find a job in their field and had to settle for a developer job.
Programming certainly requires a minimum level of intelligence, 
but beyond that other qualities might be better predictors of success.
If programming wasn’t your first choice, you will likely bring less conscientiousness to the table.
And then there’s the dissonance between what the customer needs and what is fun to program.
Inventing a new algorithm that drastically improves performance requires very smart people,
but customer focus can be achieved by anyone willing to focus.&lt;/p&gt;

&lt;h1 id=&quot;the-evolution-of-the-chinese-language&quot;&gt;The evolution of the Chinese language&lt;/h1&gt;
&lt;p&gt;The modern mandarin language has been underway for quite some time, 
and is a result of merging many dialects into a common, standardized language.&lt;/p&gt;

&lt;p&gt;In order to facilitate the coming together of different tribes, dialects, and 100s of millions of people,
the language had to become simpler. 
Just as recently as the 1950s, the writing system underwent a &lt;a href=&quot;https://en.wikipedia.org/wiki/Chinese_Character_Simplification_Scheme&quot;&gt;simplification scheme&lt;/a&gt;,
in part to achieve a higher literacy rate.
In other words, the government intentionally simplified the official language, 
to make it more accessible for the masses.&lt;/p&gt;

&lt;p&gt;This sounds very familiar from a programming perspective, 
as we have been going through a similar evolution.
On the one hand, high-level languages have completely overtaken the general purpose market.
At the same time tools and languages for non-devs have become prevalent.
For example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The x++ language is essentially a DSL for writing business applications, 
without pre-requisite knowledge about the database and presentation layers.&lt;/li&gt;
  &lt;li&gt;No/low-code platforms like PowerAutomate make programming accessible to everyone.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Simplifying the way code or prose is written enables more people to participate.&lt;/p&gt;

&lt;p&gt;Chinese and Japanese tend to be more literal, giving children a head start.
https://gineersnow.com/students/best-explanation-asians-good-math&lt;/p&gt;

&lt;p&gt;How many kids know what &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pediatrics&lt;/code&gt; means?
Maybe some, but can they understand the meaning of the word by reading it?
In contrast, the words &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;小児科&lt;/code&gt; in Japanese, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;小儿科&lt;/code&gt; in Chinese (even simpler), 
carry their meaning and can be understood by kids with basic reading ability.
Even without a grasp of the medical system, they will know that the word is about small children.&lt;/p&gt;

&lt;p&gt;Do you know what &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gastroenterology&lt;/code&gt; is? 
In Chinese, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;胃肠学&lt;/code&gt; leaves no room for doubt: It’s the study of the stomach and intestines.
That’s what I call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kinderleicht&lt;/code&gt; (child’s play).&lt;/p&gt;

&lt;p&gt;The reality for modern European languages is that they all borrow from each other,
which increases the complexity for learners, as different origins mean new stems, prefixes, suffixes, etc.
I still have to look up what &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;endocrinology&lt;/code&gt; means, even though I have worked with medical terms quite a bit.
Sure, you will eventually deduct that &lt;a href=&quot;https://en.wiktionary.org/wiki/-logy#Suffix&quot;&gt;ology&lt;/a&gt; 
identifies a scientific study, 
but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;学&lt;/code&gt; is literally the word for learning and features in 1st grade words like school &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;学校&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Minimal grammar&lt;/li&gt;
  &lt;li&gt;Literal words&lt;/li&gt;
  &lt;li&gt;Simple number system&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.hawaii.edu/satocenter/langnet/definitions/singlish.html&quot;&gt;Singlish&lt;/a&gt; can give an impression 
of what English would look like with some of the Chinese simplifications applied.&lt;/p&gt;

&lt;p&gt;Malcolm Gladwell, Asian / Chinese children are better at math because
their numbers are shorter. They can remember more numbers.&lt;/p&gt;</content><author><name>Andreas Volkmann</name><email>avolkmann@me.com</email></author><category term="blog" /><summary type="html">In natural languages there are different degrees of context, ranging from low to high, correlated to high- and low-context cultures). Highly context-based languages allow for very succinct communication, since conversations assume a lot of implicit information. One example being that references to the topic and/or subject can be either wholly omitted, or drastically reduced.</summary></entry><entry><title type="html">Hacking</title><link href="https://andreasvolkmann.github.io//blog/2021-07-05-hacking/" rel="alternate" type="text/html" title="Hacking" /><published>2021-07-05T00:00:00+02:00</published><updated>2021-07-05T00:00:00+02:00</updated><id>https://andreasvolkmann.github.io//blog/hacking</id><content type="html" xml:base="https://andreasvolkmann.github.io//blog/2021-07-05-hacking/">&lt;p&gt;Ideas&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Fixing problems&lt;/p&gt;

    &lt;p&gt;Almost any operation could cause problems back then.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Installing AOE 1 on Win95 takes forever, crashed, hope it works&lt;/li&gt;
      &lt;li&gt;Computer broke after installing WinXP update&lt;/li&gt;
      &lt;li&gt;Trying to play CounterStrike at a LAN party with a Win98 laptop&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Nowadays, operations still fail, 
but rarely cause the entire OS to hang or break.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Burn CDs
    &lt;ul&gt;
      &lt;li&gt;Heroes 3&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Writable Gameboy cartridge&lt;/li&gt;
  &lt;li&gt;Modding
    &lt;ul&gt;
      &lt;li&gt;LF2&lt;/li&gt;
      &lt;li&gt;GTA&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Map editors
    &lt;ul&gt;
      &lt;li&gt;AOE&lt;/li&gt;
      &lt;li&gt;Never Winter Nights, Battle Realms&lt;/li&gt;
      &lt;li&gt;Warcraft 3 Map Editor&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Essentially a kind of open source community.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Andreas Volkmann</name><email>avolkmann@me.com</email></author><category term="blog" /><summary type="html">Ideas Fixing problems</summary></entry><entry><title type="html">Persistence</title><link href="https://andreasvolkmann.github.io//blog/2021-05-09-TODO/" rel="alternate" type="text/html" title="Persistence" /><published>2021-05-09T00:00:00+02:00</published><updated>2021-05-09T00:00:00+02:00</updated><id>https://andreasvolkmann.github.io//blog/TODO</id><content type="html" xml:base="https://andreasvolkmann.github.io//blog/2021-05-09-TODO/">&lt;p&gt;Short term - long term, finite - infinite.
Most shortcuts come with a trade-off…&lt;/p&gt;

&lt;p&gt;With most day-to-day decisions it seems we have two options:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;We can trade &lt;em&gt;short term gain&lt;/em&gt; for &lt;em&gt;long term detriment&lt;/em&gt;.
    &lt;ul&gt;
      &lt;li&gt;Additional time is most frequently traded for long term detriment.&lt;/li&gt;
      &lt;li&gt;Staying up late to have fun, consuming coffee or sugar to stay awake, 
eating fast food rather than cooking healthy, 
or not exercising so that you can spend the time on something else.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;We can trade &lt;em&gt;short term discomfort&lt;/em&gt; for &lt;em&gt;long term gain&lt;/em&gt;.
    &lt;ul&gt;
      &lt;li&gt;This can be active, like exercise where we exert ourselves to improve our body over time, 
or passive, as in restraint, where we deny ourselves a fleeting pleasure for later benefit.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For both, however, it seems we can adapt the short term action into a habit, 
which often mitigates the discomfort of option 2, but not the long term detriment of option 1.&lt;/p&gt;

&lt;p&gt;We can establish a habit of partying with our friends every weekend, 
drinking (more and more) coffee and soda every day, having a favorite burger at a fast food chain, 
and consuming media after work instead of moving our body.
Such habits make us stick to and appreciate the actions, 
but do not help us avoid their long term impacts.&lt;/p&gt;

&lt;p&gt;On the other hand, we can slowly build a habit of exercising regularly, 
which reduces the short term discomfort, but not the long term gains.&lt;/p&gt;

&lt;p&gt;Another way of framing it: … where a better alternative exists.&lt;/p&gt;

&lt;p&gt;…
If your life span was not bound to conventional expectations, and you&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;h2 id=&quot;the-basics&quot;&gt;The basics&lt;/h2&gt;

&lt;p&gt;The basics for a well-functioning human body and brain are well known and 
therefore do not require a lengthy introduction.&lt;/p&gt;

&lt;p&gt;In order of importance: Sleep, nutrition, exercise.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/basic_needs.png&quot; alt=&quot;Basic needs pyramid&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;sleep&quot;&gt;Sleep&lt;/h3&gt;
&lt;p&gt;Sleep is the basis for all life.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;[…] sleep was the first state of life on this planet, and it was from sleep that wakefulness emerged.&lt;/p&gt;

  &lt;p&gt;&lt;em&gt;Why We Sleep, Matthew Walker&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The guideline is simple:
Regular 8 hours of sleep, ideally same start and end time every day (also weekends).&lt;/p&gt;

&lt;p&gt;An important point to make regarding sleep shortcuts now and then, 
is that we cannot recover from lost sleep.&lt;/p&gt;

&lt;p&gt;In other words, every hour of sleep lost has detrimental effects, 
and our brains are incapable of recovering fully.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[…] the shorter you sleep, the shorter your life.&lt;/p&gt;

  &lt;p&gt;&lt;em&gt;Why We Sleep, Matthew Walker&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next time you think about borrowing time, know where you are taking it from.&lt;/p&gt;

&lt;h3 id=&quot;nutrition&quot;&gt;Nutrition&lt;/h3&gt;
&lt;p&gt;Modern nutrition is full of shortcuts that come back to haunt us later on.
Added sugar, fat, and salt can generally be seen as a short term gain in taste 
at the expense of long term health.
Furthermore, as you adjust to this new taste you will slowly come to expect it as the new standard, 
making healthy food seem less tasty.&lt;/p&gt;

&lt;p&gt;The guideline:
Maximize the amount and variety of whole fruits and vegetables you eat.
(Fruit juice doesn’t count)&lt;/p&gt;

&lt;p&gt;Alcohol intake should be severely limited.&lt;/p&gt;

&lt;p&gt;Don’t go too far with caffeine, favor tea over coffee. 
Artificial sources like energy drinks are literal cancer and are never ok to drink.&lt;/p&gt;

&lt;h4 id=&quot;insulin-spikes&quot;&gt;Insulin spikes&lt;/h4&gt;
&lt;p&gt;Processed foods are a common shortcut, providing a comfortable, tasty option, often with a long shelf life.
There are many arguments against processed foods, one of them being the accompanying insulin spikes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://nutritionfacts.org/video/if-fructose-is-bad-what-about-fruit/&quot;&gt;&lt;img src=&quot;/assets/img/insulin_spike.png&quot; alt=&quot;Insulin spike graph&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the graph, we see that consumption of white bread causes a sharp insulin spike, 
which can be blunted by adding berries to the bread, thereby applying the nutrition guideline.&lt;/p&gt;

&lt;p&gt;This is why the guideline recommends maximizing, 
rather than enforcing a diet consisting of 100% fruits and vegetables.
It is possible to get most of the benefits from plants and still enjoy some not-entirely healthy products.&lt;/p&gt;

&lt;h3 id=&quot;exercise&quot;&gt;Exercise&lt;/h3&gt;
&lt;p&gt;Exercise trades short term discomfort for long term health.
We can mitigate the discomfort by changing our mindset or engaging in play. 
A game of badminton makes us move, but we may not even notice that we exerted ourselves.&lt;/p&gt;

&lt;p&gt;The guideline:
There is not much to say, just go out and move.&lt;/p&gt;

&lt;h2 id=&quot;acquired-taste&quot;&gt;Acquired taste&lt;/h2&gt;
&lt;p&gt;Everything that is appreciated, you can appreciate, too.
It should be quite obvious that this has nothing to do with race / ethnicity, but everything with exposure.
Descendants of immigrants may take on the local culture 
and develop the same taste preferences as “native” people.&lt;/p&gt;

&lt;h3 id=&quot;the-king-of-fruits&quot;&gt;The king of fruits&lt;/h3&gt;
&lt;p&gt;A good example of acquired taste is the fruit &lt;a href=&quot;https://en.wikipedia.org/wiki/Durian&quot;&gt;durian&lt;/a&gt;, 
mostly unknown in the western hemisphere, 
whilst enjoying the title &lt;em&gt;king of fruits&lt;/em&gt; in some Asian countries.&lt;/p&gt;

&lt;p&gt;It has a very distinct smell and quite a special taste. 
Although considered a royalty in some parts of the world, 
a quick google search presents us with the following questions:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Why does durian taste so bad?&lt;/li&gt;
  &lt;li&gt;Why is the durian fruit banned?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/durian.png&quot; alt=&quot;Durian&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I still haven’t learned to fully appreciate this fruit, but I try to eat some every chance I get. 
If there is a large group of people deeming durian the best fruit on earth, 
then we can be sure that there is yet another facet of life that has hitherto eluded us.&lt;/p&gt;

&lt;h3 id=&quot;life-enriched&quot;&gt;Life enriched&lt;/h3&gt;
&lt;p&gt;Trying something new, the first couple of times may indeed be uncomfortable, 
but the long term benefits are many.&lt;/p&gt;

&lt;p&gt;Spicy and fermented foods are often difficult to get used to, 
but many of these are accompanied by great health benefits.&lt;/p&gt;

&lt;p&gt;Then there are genres, for example music, 
where people like to argue that their personal favorite style is the best.
The answer to this is simple: Exposure. 
Go, listen to more music, and you will find that there is something good in every genre.&lt;/p&gt;

&lt;p&gt;Different cultures use different scales, which may sound weird / disharmonious to us initially.
Again, it is obvious that this is just a question of exposure.&lt;/p&gt;

&lt;p&gt;Let’s take the example of Arabic music, where we encounter notes, 
which from a western perspective, are off the scale.&lt;/p&gt;

&lt;h2 id=&quot;supplements&quot;&gt;Supplements&lt;/h2&gt;
&lt;p&gt;SUPPLEMENTS&lt;/p&gt;

&lt;p&gt;Smoking should of course be avoided.&lt;/p&gt;

&lt;h2 id=&quot;education&quot;&gt;Education&lt;/h2&gt;
&lt;p&gt;When kids show bad behavior, we scold or reprimand them, trading short term unhappiness / conflict 
for long term education, as the child learns about interpersonal relationships, 
societal limits and norms.&lt;/p&gt;

&lt;p&gt;In situations where your child hurts another during an argument, 
the easy way out would be to defend your own child, 
thereby minimizing conflict and maintaining your relationship to your child in the short term.
Eventually, the child will be put in his/her place by other authorities, 
this time with actual consequences.
If we don’t show sufficient sternness towards children, we harm them in the long run.&lt;/p&gt;

&lt;h2 id=&quot;conversation&quot;&gt;Conversation&lt;/h2&gt;
&lt;p&gt;Quality conversations are rare, and people try to steer the topic into a direction that benefits themselves.
We generally feel an urge to talk about ourselves or about the things that we find interesting.
Holding back things you want to say in the short term can benefit 
the quality and outcome of the conversation.&lt;/p&gt;

&lt;h2 id=&quot;screens&quot;&gt;Screens&lt;/h2&gt;
&lt;p&gt;Phone and apps short term attention
Take a walk, close eyes, meditation&lt;/p&gt;

&lt;h3 id=&quot;books-vs-articles&quot;&gt;Books vs “articles”&lt;/h3&gt;
&lt;p&gt;Unless you have a high quality source, I would not recommend reading articles.
Focus on books instead.&lt;/p&gt;

&lt;h2 id=&quot;money&quot;&gt;Money&lt;/h2&gt;
&lt;p&gt;Investing over time better than short term gains&lt;/p&gt;

&lt;h2 id=&quot;software&quot;&gt;Software&lt;/h2&gt;
&lt;p&gt;Resist short term fun for long term happiness
Premature optimization&lt;/p&gt;

&lt;h2 id=&quot;industry&quot;&gt;Industry&lt;/h2&gt;
&lt;p&gt;Short term boosts often at the cost of long term health
Fitness industry, caffeine, protein, supplements&lt;/p&gt;

&lt;h2 id=&quot;purism&quot;&gt;Purism&lt;/h2&gt;
&lt;p&gt;Purism and gatekeeping is usually bad.
Do not follow … 100% just to achieve a 100% rate.
This is most easily illustrated by nutrition.
You can cook with fat, add dressing to your salad, have a beer / coffee, and eat some meat.
Trying to stay at 100% no meat, so you can call yourself vegetarian, 
or going further for the vegan seal does not actually earn you an award.
Likely, the 80-20 rule applies. So try to hit 80% with the good habits first, 
before micro-optimizing the remaining 20%.
For example, if your diet is unhealthy, and you rarely exercise, 
improve your diet to acceptable levels, and then do the same thing for your exercise, 
ideally both at the same time.&lt;/p&gt;

&lt;p&gt;Make the long term benefits your habit, and the short term gains the exception.&lt;/p&gt;</content><author><name>Andreas Volkmann</name><email>avolkmann@me.com</email></author><category term="blog" /><summary type="html">Short term - long term, finite - infinite. Most shortcuts come with a trade-off…</summary></entry><entry><title type="html">Clean Architecture with ArchUnit</title><link href="https://andreasvolkmann.github.io//blog/2021-04-24-clean-arch-unit/" rel="alternate" type="text/html" title="Clean Architecture with ArchUnit" /><published>2021-04-24T00:00:00+02:00</published><updated>2021-04-24T00:00:00+02:00</updated><id>https://andreasvolkmann.github.io//blog/clean-arch-unit</id><content type="html" xml:base="https://andreasvolkmann.github.io//blog/2021-04-24-clean-arch-unit/">&lt;p&gt;In a &lt;a href=&quot;/blog/2020-02-20-spring-kotlin-gradle-aop&quot;&gt;previous post&lt;/a&gt;
I discussed ways in which AOP can help in defining our architecture, 
even allowing us to verify architectural rules at compile time.&lt;/p&gt;

&lt;p&gt;While this approach certainly does work, it has a few drawbacks, like its reliance on 
AOP, which is not always an option. 
Furthermore, the way these rules are defined is slightly unnatural.&lt;/p&gt;

&lt;p&gt;A more idiomatic way of automatically verifying one’s architecture is &lt;a href=&quot;https://www.archunit.org/&quot;&gt;ArchUnit&lt;/a&gt;,
which enables us to define our rules as unit tests.&lt;/p&gt;

&lt;p&gt;Originally a Java library, the project has since been ported to C#, 
which makes sense, considering &lt;s&gt;Java&lt;/s&gt; Kotlin and C# are the same language.
If a truly useful library is created in either of these, 
it will eventually be ported to the others, 
just like for &lt;a href=&quot;https://en.wikipedia.org/wiki/AspectJ&quot;&gt;AspectJ&lt;/a&gt; we now got &lt;a href=&quot;https://www.postsharp.net/&quot;&gt;PostSharp&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Anyway, this is convenient for me, 
since I wanted to take a look at enforcing a clean architecture in C# today. 
(Please read &lt;a href=&quot;https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&quot;&gt;Uncle Bob’s post&lt;/a&gt;)
&lt;a href=&quot;https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&quot;&gt;&lt;img src=&quot;/assets/img/CleanArchitecture.jpg&quot; alt=&quot;Overview of the Clean Architecture&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the Java ArchUnit, there is out of the box support for both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layered&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onion&lt;/code&gt; architectures, 
but not in the dotnet ports.&lt;/p&gt;

&lt;p&gt;I won’t be going for a full-blown onion / clean arch as my purpose is to slowly evolve 
and improve the architecture of my project. Taking things from 0 to 100 in one step is 
likely not gonna benefit anyone, and it is easier to adapt to small, incremental changes.
So, while the end goal is a clean architecture, 
for now I just want to implement some simple layer checks, 
similar to the ones shown in the image below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/layer-check.png&quot; alt=&quot;Overview of the Clean Architecture&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;p&gt;I found two candidates for ArchUnit-style tests:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/TNG/ArchUnitNET&quot;&gt;ArchUnitNET&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/BenMorris/NetArchTest&quot;&gt;NetArchTest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I decided to go with the former, as it is from TNG, the same team as the original library.&lt;/p&gt;

&lt;p&gt;After installing, I noticed there is no assert support for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MSTest&lt;/code&gt;, 
so I recommend to just copy the related classes from &lt;a href=&quot;https://github.com/TNG/ArchUnitNET/tree/master/ArchUnitNET.xUnit&quot;&gt;the xUnit folder&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/AndreasVolkmann/archNet/tree/master/TestProject1/Arch&quot;&gt;Here&lt;/a&gt; is what I ended up with.&lt;/p&gt;

&lt;h2 id=&quot;rules&quot;&gt;Rules&lt;/h2&gt;

&lt;p&gt;The individual layers can be defined like this:&lt;/p&gt;
&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serviceLayer&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;That&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ResideInNamespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.Service&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controllerLayer&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;That&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ResideInNamespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.Controller&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;peristenceLayer&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;That&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ResideInNamespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.Repository&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s start with our first rule: 
None of our code should depend on any controller / inbound port.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LayeredArch_Controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;That&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreNot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;controllerLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;NotDependOnAny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;controllerLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Architecture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The next rule prevents access from the persistence layer to the service layer.&lt;/p&gt;
&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;That&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Are&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;peristenceLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;NotDependOnAny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serviceLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And lastly, only allow the service layer to access the persistence layer.&lt;/p&gt;
&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;That&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreNot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serviceLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;NotDependOnAny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;peristenceLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The complete test class is available &lt;a href=&quot;https://github.com/AndreasVolkmann/archNet/blob/master/TestProject1/Arch/ArchitectureTests.cs&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;ArchUnit provides an elegant way of defining architectural rules, helping you enforce
your design. 
Whilst the AOP compile-time approach is great, too, I prefer an AOP-independent solution.&lt;/p&gt;

&lt;p&gt;It would be great to have the layer and onion dsl ported to C#, too.&lt;/p&gt;

&lt;p&gt;I will be experimenting with the layers and slowly approach a clean architecture.&lt;/p&gt;</content><author><name>Andreas Volkmann</name><email>avolkmann@me.com</email></author><category term="blog" /><summary type="html">In a previous post I discussed ways in which AOP can help in defining our architecture, even allowing us to verify architectural rules at compile time.</summary></entry><entry><title type="html">Arkenv v3.2.0 - available on maven central</title><link href="https://andreasvolkmann.github.io//blog/2021-04-03-arkenv-new-release/" rel="alternate" type="text/html" title="Arkenv v3.2.0 - available on maven central" /><published>2021-04-03T00:00:00+02:00</published><updated>2021-04-03T00:00:00+02:00</updated><id>https://andreasvolkmann.github.io//blog/arkenv-new-release</id><content type="html" xml:base="https://andreasvolkmann.github.io//blog/2021-04-03-arkenv-new-release/">&lt;p&gt;I am happy to announce that we have migrated from JCenter to &lt;a href=&quot;https://search.maven.org/search?q=arkenv&quot;&gt;Maven Central&lt;/a&gt;, and are
releasing version &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3.2.0&lt;/code&gt; with new features, including plain class support and constructor injection.
Before we dive into the news, I want to take a look back at how we got here.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/aPureBase/arkenv/master/docs/arkenv_logo.png&quot; alt=&quot;Arkenv logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Throughout its lifetime, &lt;a href=&quot;https://github.com/aPureBase/arkenv&quot;&gt;Arkenv&lt;/a&gt; has offered many great learning opportunities, 
and having the chance to create such a project is something I wish upon every developer.&lt;/p&gt;

&lt;p&gt;Even though it is in no way a complex, or groundbreaking venture, 
I still consider it an important stepping stone, being my first open-source library.
Keeping the scope small and manageable is probably an advantage when starting out.&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;
&lt;p&gt;There were two primary reasons for the conception of Arkenv.&lt;/p&gt;

&lt;p&gt;Firstly, we were looking for a way to seamlessly bridge the changing configuration needs in 
different environments with minimal developer intervention.
Starting out with command line libraries like &lt;a href=&quot;https://github.com/cbeust/jcommander&quot;&gt;JCommander&lt;/a&gt;, 
we soon realized that we wanted a central abstraction to define our external configuration,
which didn’t depend on the configuration source. 
Pretty much like &lt;a href=&quot;https://spring.io/blog/2020/04/23/spring-tips-configuration&quot;&gt;Environment&lt;/a&gt; in Spring.&lt;/p&gt;

&lt;p&gt;For example, we wanted to be able to go from a command line-driven environment to an
environment variable-driven one without having to add code or recompile.&lt;/p&gt;

&lt;p&gt;Secondly, I really wanted to try to build something with &lt;a href=&quot;https://kotlinlang.org/docs/delegated-properties.html&quot;&gt;Kotlin delegates&lt;/a&gt;.
Another issue we had with many existing, annotation-based libraries, was the lack of type-safety 
and null support. 
Quickly, we saw that delegates were a perfect fit for these criteria, and the first version
with CLI and ENV support didn’t fill more than a few lines.&lt;/p&gt;

&lt;p&gt;The idea was to declare an immutable property, with nullability indicating whether it is optional or not,
and whose name is used to resolve it.&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Once declared, it can be provided via CLI &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--port 443&lt;/code&gt;, environment variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PORT=443&lt;/code&gt;,
or in a profile (properties, yaml) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;port: 443&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Later on we added support for other sources, like &lt;a href=&quot;https://apurebase.gitlab.io/arkenv/features/dot-env-files/&quot;&gt;.env files&lt;/a&gt;
 and &lt;a href=&quot;https://apurebase.gitlab.io/arkenv/features/docker-secrets/&quot;&gt;Docker secrets&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;new-repository&quot;&gt;New repository&lt;/h2&gt;
&lt;p&gt;With the announcement of JCenter ending support of their popular repository, 
many open-source projects had to migrate to Maven Central.
We could have lived without this interruption, but on the other hand,
it is great to be able to go with the default repository.&lt;/p&gt;

&lt;p&gt;From now on, all new releases will be available here.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mavenCentral&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;implementation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.apurebase&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;arkenv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;3.2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;implementation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.apurebase&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;arkenv-yaml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;3.2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// for yaml support&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;new-features&quot;&gt;New features&lt;/h2&gt;

&lt;h3 id=&quot;plain-class-support&quot;&gt;Plain class support&lt;/h3&gt;

&lt;p&gt;It is no longer necessary to extend &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arkenv&lt;/code&gt; when defining an argument class.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Configuration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Arkenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Plain classes do not have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;help&lt;/code&gt; argument by default.&lt;/p&gt;

&lt;h4 id=&quot;constructor-injection&quot;&gt;Constructor injection&lt;/h4&gt;
&lt;p&gt;Instead of declaring arguments, one can now let &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arkenv&lt;/code&gt; inject directly
into the constructor of a plain class.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// construct an instance with the parse factory function&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arkenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Consequently, we cannot apply any config to these arguments, 
but default values are supported natively.&lt;/p&gt;

&lt;h4 id=&quot;modules&quot;&gt;Modules&lt;/h4&gt;
&lt;p&gt;The above approaches can be combined freely, and both support modules, too.
In plain classes, modules are declared with a delegate, i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;by module()&lt;/code&gt;.
The module delegate function also accepts a configuration lambda with prefix support.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SubConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;Configuration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;subModule&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SubConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Arkenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// member access&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SubConfig&lt;/code&gt; class accepts constructor parameters and declares arguments in its body.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Configuration&lt;/code&gt; object declares a module that is automatically created on parse.&lt;/p&gt;

&lt;h3 id=&quot;new-feature-syntax&quot;&gt;New feature syntax&lt;/h3&gt;
&lt;p&gt;Features can now be configured with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arkenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ProfileFeature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;breaking-changes&quot;&gt;Breaking changes&lt;/h2&gt;
&lt;p&gt;Most extension functions have moved to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;util&lt;/code&gt; package.
This will break your build when upgrading, but should be easy to fix,
by importing the correct packages.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//import com.apurebase.arkenv.parse&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.apurebase.arkenv.util.parse&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;further-information&quot;&gt;Further information&lt;/h2&gt;
&lt;p&gt;Log any bugs or feature requests on &lt;a href=&quot;https://github.com/aPureBase/arkenv&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;📃 Please visit &lt;a href=&quot;https://apurebase.gitlab.io/arkenv/&quot;&gt;https://apurebase.gitlab.io/arkenv/&lt;/a&gt; for in-depth documentation.&lt;/p&gt;

&lt;p&gt;🤝 Ask any questions in the Arkenv channel in the &lt;a href=&quot;https://kotlinlang.slack.com/messages/CGF74HD19/&quot;&gt;official Kotlin Slack&lt;/a&gt;.&lt;/p&gt;</content><author><name>Andreas Volkmann</name><email>avolkmann@me.com</email></author><category term="blog" /><summary type="html">I am happy to announce that we have migrated from JCenter to Maven Central, and are releasing version 3.2.0 with new features, including plain class support and constructor injection. Before we dive into the news, I want to take a look back at how we got here.</summary></entry><entry><title type="html">The x++ Chain of Command</title><link href="https://andreasvolkmann.github.io//blog/2021-01-25-xpp-chain-of-command/" rel="alternate" type="text/html" title="The x++ Chain of Command" /><published>2021-01-25T00:00:00+01:00</published><updated>2021-01-25T00:00:00+01:00</updated><id>https://andreasvolkmann.github.io//blog/xpp-chain-of-command</id><content type="html" xml:base="https://andreasvolkmann.github.io//blog/2021-01-25-xpp-chain-of-command/">&lt;p&gt;One of my favorite features of the x++ programming language is the ability 
to extend classes by creating a chain of command, also referred to as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CoC&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It allows multiple consumers to seamlessly augment existing code side-by-side 
with minimal work required from the owner.&lt;/p&gt;

&lt;p&gt;This is especially valuable for software where customization is the norm 
and multiple independent parties want to customize the same code.&lt;/p&gt;

&lt;p&gt;The result is a flexible extension model conforming to the open/closed principle.&lt;/p&gt;

&lt;h2 id=&quot;extending-code&quot;&gt;Extending code&lt;/h2&gt;
&lt;p&gt;Given a class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OrderSubmitService&lt;/code&gt; as defined below, we want to customize 
the validation behavior when an order is submitted.&lt;/p&gt;

&lt;p&gt;Inheritance is not an option, as the class is final.
Furthermore, this approach requires that the class can be substituted at its call site,
which is often not possible.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderSubmitService&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// final class, no inheritance&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SimpleOrder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simpleOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;submitOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;validateOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;simpleOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validateOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simpleOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// we want to customize this&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ideally, we would like to just add our custom logic to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;validateOrder&lt;/code&gt; method.&lt;/p&gt;

&lt;h2 id=&quot;next&quot;&gt;Next&lt;/h2&gt;
&lt;p&gt;In order to create a chain of command, we create a new class with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_Extension&lt;/code&gt; suffix 
and add a reference to the target class in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExtensionOf&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;Then we are free to declare any public or protected methods from the target class
and define custom behavior.&lt;/p&gt;

&lt;p&gt;In the below example we add another validation step to the existing one.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ExtensionOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classStr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OrderSubmitService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))]&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderSubmitService_Extension&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validateOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isAvailable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;simpleOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;IsAvailable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// access to protected members&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validateOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isAvailable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// calling next is mandatory&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Calling next invokes the next extension in the chain, until it reaches the base implementation.&lt;/p&gt;

&lt;p&gt;In this way, independent parties can add more layers of code on top of the core,
which can be locked down to prevent unintended side effects.&lt;/p&gt;

&lt;p&gt;Looking at the code, this seems oddly familiar.&lt;/p&gt;

&lt;h2 id=&quot;parallels&quot;&gt;Parallels&lt;/h2&gt;

&lt;p&gt;There are no other languages with CoC support, AFAIK, but one parallel came to mind.&lt;/p&gt;

&lt;p&gt;We can achieve similar results with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Around&lt;/code&gt; advice in AOP as shown in the Kotlin Spring code below.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Aspect&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderSubmitServiceExtension&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Around&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;execution(* OrderSubmitService.validateOrder(..)) &amp;amp;&amp;amp; target(orderSubmitService)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validateOrder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProceedingJoinPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orderSubmitService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderSubmitService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;isAvailable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orderSubmitService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simpleOrder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IsAvailable&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isAvailable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are some major differences and changes needed to make this work, 
like not being able to access protected members, 
but otherwise it is really cool to observe the similarities here.&lt;/p&gt;

&lt;p&gt;Calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next&lt;/code&gt; in x++ is required, but we can ignore the result in both. 
Both provide access to the target class.&lt;/p&gt;

&lt;p&gt;Whereas AOP is commonly leveraged to address cross-cutting concerns, 
CoC addresses the cross-cutting concern of code extensibility in x++.&lt;/p&gt;

&lt;p&gt;The extension model of x++ is of course much more than CoC.
For example, you can also add state to classes via extensions.
But I have to say, I really came to appreciate the power of the Chain of Command 
in creating elegant, extensible solutions with minimal boilerplate.&lt;/p&gt;</content><author><name>Andreas Volkmann</name><email>avolkmann@me.com</email></author><category term="blog" /><summary type="html">One of my favorite features of the x++ programming language is the ability to extend classes by creating a chain of command, also referred to as CoC.</summary></entry><entry><title type="html">Spring AOP - Feature Switches</title><link href="https://andreasvolkmann.github.io//blog/2020-11-25-spring-aop-feature-switches/" rel="alternate" type="text/html" title="Spring AOP - Feature Switches" /><published>2020-11-25T00:00:00+01:00</published><updated>2020-11-25T00:00:00+01:00</updated><id>https://andreasvolkmann.github.io//blog/spring-aop-feature-switches</id><content type="html" xml:base="https://andreasvolkmann.github.io//blog/2020-11-25-spring-aop-feature-switches/">&lt;p&gt;One idea I recently happened upon is handling feature switches in an aspect.
Essentially, we want to externally control whether certain code should execute or not.&lt;/p&gt;

&lt;p&gt;This is really a cross-cutting concern, and thereby a top contender for AOP!
One way to identify candidates for AOP is looking for those small bits of code that are scattered around your code base 
which do not really contribute to the single responsibility of the class.&lt;/p&gt;

&lt;p&gt;For feature switches it is annoying having to always inject some feature manager and start things off with:&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;isEnabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;featureSwitchManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isEnabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEnabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// actual code&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a kind of meta capability that our code shouldn’t have to worry about. 
Additionally, we are usually happier testing the code without all this extra noise.&lt;/p&gt;

&lt;h2 id=&quot;the-aspect&quot;&gt;The Aspect&lt;/h2&gt;

&lt;p&gt;The source is available &lt;a href=&quot;https://github.com/AndreasVolkmann/playground/blob/master/src/main/kotlin/me/avo/cosmos/aspect/FeatureAspect.kt&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Aspect&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FeatureAspect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;featureSwitchManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FeatureSwitchManager&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Pointcut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;execution(public * *(..))&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;anyPublicMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Around&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;anyPublicMethod() &amp;amp;&amp;amp; @annotation(annotation)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;proceedIfEnabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProceedingJoinPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;annotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FeatureSwitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;featureName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;annotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;takeIf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isNotBlank&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FeatureNameBlankException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;featureSwitchManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isEnabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;featureName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The implementation is super simple. 
We define a pointcut for any public methods with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@FeatureSwitch&lt;/code&gt; annotation,
and pass the provided feature name to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FeatureSwitchManager&lt;/code&gt;, implementing the actual feature check.&lt;/p&gt;

&lt;p&gt;An example of a consuming service:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MessageService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@FeatureSwitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MessageService&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Running message service!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now the run method can be enabled by passing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; in the application properties:&lt;/p&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;MessageService&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And there you have it.
A simple AOP solution, taking care of feature switch boilerplate code.&lt;/p&gt;</content><author><name>Andreas Volkmann</name><email>avolkmann@me.com</email></author><category term="blog" /><summary type="html">One idea I recently happened upon is handling feature switches in an aspect. Essentially, we want to externally control whether certain code should execute or not.</summary></entry><entry><title type="html">Spring AOP - CustomizableTraceInterceptor</title><link href="https://andreasvolkmann.github.io//blog/2020-09-27-spring-aop-logging/" rel="alternate" type="text/html" title="Spring AOP - CustomizableTraceInterceptor" /><published>2020-09-27T00:00:00+02:00</published><updated>2020-09-27T00:00:00+02:00</updated><id>https://andreasvolkmann.github.io//blog/spring-aop-logging</id><content type="html" xml:base="https://andreasvolkmann.github.io//blog/2020-09-27-spring-aop-logging/">&lt;p&gt;The more I learn about Spring, the more I come to understand and appreciate its true power, 
with one major appeal being developer productivity.&lt;/p&gt;

&lt;p&gt;In my &lt;a href=&quot;https://andreasvolkmann.github.io/blog/2020-02-20-spring-kotlin-gradle-aop/&quot;&gt;previous post&lt;/a&gt; 
I discussed some useful things we can do with aspect oriented programming, including logging. 
Spring covers many of these use cases out of the box, without any additional concepts or dependencies.
Let’s explore how to configure a trace interceptor and how this can make us more productive.&lt;/p&gt;

&lt;p&gt;Oftentimes, when we encounter a bug in the live application, 
we want to get a deeper understanding of what lead to the current state 
and turn to the logs.
Now, during development we may not have decided upon and set up detailed logging, 
which leads us to add some additional logging or print statements 
to get insights into the erroneous process.&lt;/p&gt;

&lt;p&gt;This costs time, is annoying, and is ultimately not a very lean process, as a better alternative is available.
The premise is the following:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Automatically provide meaningful insights into the app. 
Configure once, applied seamlessly to any existing or new code without additional work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Say you implement a new part of your app, including a service with one central method:&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testMultiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TEST!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, during testing it turns out there is a bug which leads to inconsistent results, 
even though you are sure the input params are as expected.&lt;/p&gt;

&lt;p&gt;Wouldn’t it be nice to have the following in your logs:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;2020-09-27 13:32:51.404 TRACE 2220 --- [Test worker] m.a.y.s.TestService&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Entering testMultiply(6,7)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;TEST!&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;2020-09-27 13:32:51.654 TRACE 2220 --- [Test worker] m.a.y.s.TestService&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Leaving testMultiply(), returned 42, running time = 250 ms&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This includes a message on entering and leaving the method, 
with information about the parameters, the return value and the time spent.
This can be customized further, but is usually a good starting point.&lt;/p&gt;

&lt;h3 id=&quot;logger-configuration&quot;&gt;Logger configuration&lt;/h3&gt;

&lt;p&gt;Here is the corresponding logger configuration. Source available &lt;a href=&quot;https://github.com/AndreasVolkmann/Yunyin/blob/master/src/main/kotlin/me/avo/yunyin/config/LoggerConfig.kt&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoggerConfig&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;customizableTraceInterceptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomizableTraceInterceptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;setUseDynamicLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;setEnterMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Entering $[methodName]($[arguments])&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;setExitMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Leaving $[methodName](), returned $[returnValue], running time = $[invocationTime] ms&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;setExceptionMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error $[methodName](), exception $[exception], running time = $[invocationTime] ms&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loggingAdvisor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Advisor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;pointcut&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AspectJExpressionPointcut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;expression&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
                execution (* (@org.springframework.stereotype.Service *).*(..)) 
             || execution (* (@org.springframework.stereotype.Component *).*(..))
            &quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;trimIndent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DefaultPointcutAdvisor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointcut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;customizableTraceInterceptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The details of the pointcut expression depend on what classes you want to target. 
I just wanted to know about all services and components.&lt;/p&gt;

&lt;p&gt;Notice that we do not need any explicit Spring AOP dependency 
or any other application configuration. 
The entire trace logging is self-contained and can be deployed from day one. 
You can copy-paste this class, and it works immediately.&lt;/p&gt;

&lt;p&gt;By default, the traces are logged as trace, so set the logging level accordingly.
My &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application.yml&lt;/code&gt; contains the following during development, 
where the last part is my root package name.&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;me.avo.yunyin&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TRACE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;No, or greatly reduced need to write debug statements!
Thanks to proxying, your code stays clean, whilst Spring works its magic.&lt;/p&gt;

&lt;p&gt;For production use, you will of course have to adapt your logging, 
but during development this is value for no money.&lt;/p&gt;

&lt;p&gt;I will experiment further to see how far I can push this, 
but this will definitely be a part of every future app I work on.&lt;/p&gt;</content><author><name>Andreas Volkmann</name><email>avolkmann@me.com</email></author><category term="blog" /><summary type="html">The more I learn about Spring, the more I come to understand and appreciate its true power, with one major appeal being developer productivity.</summary></entry></feed>
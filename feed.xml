<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://andreasvolkmann.github.io//feed.xml" rel="self" type="application/atom+xml" /><link href="https://andreasvolkmann.github.io//" rel="alternate" type="text/html" hreflang="en" /><updated>2025-04-30T20:56:00-07:00</updated><id>https://andreasvolkmann.github.io//feed.xml</id><title type="html">Andreas Volkmann</title><subtitle>A personal page for showcasing projects and talking about my interests.
</subtitle><author><name>Andreas Volkmann</name><email>avolkmann@me.com</email></author><entry><title type="html">♨️ Onsen - Yunnan</title><link href="https://andreasvolkmann.github.io//blog/onsen/2025-04-30-yunnan-onsen/" rel="alternate" type="text/html" title="♨️ Onsen - Yunnan" /><published>2025-04-30T00:00:00-07:00</published><updated>2025-04-30T00:00:00-07:00</updated><id>https://andreasvolkmann.github.io//blog/onsen/yunnan-onsen</id><content type="html" xml:base="https://andreasvolkmann.github.io//blog/onsen/2025-04-30-yunnan-onsen/"><![CDATA[<ol id="markdown-toc">
  <li><a href="#angsana" id="markdown-toc-angsana">Angsana</a></li>
  <li><a href="#huangguajing" id="markdown-toc-huangguajing">HuangguaJing</a></li>
  <li><a href="#rehai" id="markdown-toc-rehai">Rehai</a></li>
  <li><a href="#local-onsen" id="markdown-toc-local-onsen">Local Onsen</a></li>
  <li><a href="#outside-tengchong" id="markdown-toc-outside-tengchong">Outside Tengchong</a></li>
  <li><a href="#food" id="markdown-toc-food">Food</a></li>
</ol>

<p>Yunnan is colorful, vibrant, and very different from what most people imagine when they think of China.</p>

<p>I was surprised by how little information is accessible about this region, especially when it comes to onsen.</p>

<p>The Tengchong area has a ton of interesting hot springs in different styles: traditional, spa-style, decorative, and open-pool-style.</p>

<p>I recommend Heshun as a base, situated between many hot springs. 
Many houses, including the one I stayed in, have onsen water in their bath.</p>

<p>The area is full of mountains, lakes, rivers, making for amazing views. This one is taken close to Simolawa village:
  <hy-img root-margin="512px"  src="/assets/img/yunnan/fengjing.png" alt="view near Simolawa" >    <noscript><img data-ignore  src="/assets/img/yunnan/fengjing.png" alt="view near Simolawa" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img></p>

<h2 id="angsana">Angsana</h2>
<p>One of the spa hotels in the area with a large selection of outdoor pools. 
They have a wide temperature selection, making it a good choice for beginners.
Unfortunately, only a few pools are around 41-42 degrees.</p>

<p><a href="https://www.angsana.com/china/tengchong">Angsana website</a></p>

<p>  <hy-img root-margin="512px"  src="/assets/img/yunnan/angsana.png" alt="pools in agsana" >    <noscript><img data-ignore  src="/assets/img/yunnan/angsana.png" alt="pools in agsana" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img>
  <hy-img root-margin="512px"  src="/assets/img/yunnan/angsana_2.png" alt="pools in agsana" >    <noscript><img data-ignore  src="/assets/img/yunnan/angsana_2.png" alt="pools in agsana" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img></p>

<p>Here is the water quality report from the hotel.
  <hy-img root-margin="512px"  src="/assets/img/yunnan/shui_zhiliang.png" alt="Water quality" >    <noscript><img data-ignore  src="/assets/img/yunnan/shui_zhiliang.png" alt="Water quality" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img>
This is bicarbonate water.</p>

<p>Another similar onsen hotel we visited is “the Lotus” or Hehua (荷花温泉). Hardly any presence in English, but this is it: 
<a href="https://www.trip.com/travel-guide/attraction/lianghe/hehua-hot-spring-10759140/">Lotus onsen</a></p>

<h2 id="huangguajing">HuangguaJing</h2>

<p>Huangguajing has the hottest water (&gt;43) and overall the most authentic experience without the “spa” atmosphere. 
  <hy-img root-margin="512px"  src="/assets/img/yunnan/huangguajing.png" alt="onsen in hotel" >    <noscript><img data-ignore  src="/assets/img/yunnan/huangguajing.png" alt="onsen in hotel" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img></p>

<p>It’s small and very crowded, which can impact the experience a bit.</p>

<h2 id="rehai">Rehai</h2>
<p>Rehai has a bit of Beppu with the many decorative pools.
  <hy-img root-margin="512px"  src="/assets/img/yunnan/rehai.png" alt="view" >    <noscript><img data-ignore  src="/assets/img/yunnan/rehai.png" alt="view" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img>
It’s a nice, scenic path from the shuttle to the onsen.</p>

<h2 id="local-onsen">Local Onsen</h2>
<p>This onsen has no presence online, as far as I can tell.
It’s near the road, easy to miss if you don’t know where to look.</p>

<p>It features several foot onsen, as well as large pools.
  <hy-img root-margin="512px"  src="/assets/img/yunnan/pool.png" alt="view" >    <noscript><img data-ignore  src="/assets/img/yunnan/pool.png" alt="view" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img></p>

<p>I like the variety that onsen pools offer, as it’s super comfortable take a swim in them.</p>

<p>The sunset here was amazing.</p>

<p>This is definitely more of a local spot, so I am happy I got to experience it.</p>

<h2 id="outside-tengchong">Outside Tengchong</h2>
<p>I also visited some onsen outside Tengchong, like Reguo (热国) near Dali.
If you’re in the area, it’s worth checking out.</p>

<h2 id="food">Food</h2>

<p>Lastly, Yunnan’s got it all. Amazing food, fruit, coffee, and tea (the local tea is called Dianhong 滇红).
  <hy-img root-margin="512px"  src="/assets/img/yunnan/food.jpg" alt="food" >    <noscript><img data-ignore  src="/assets/img/yunnan/food.jpg" alt="food" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img>
The cuisine has strong influences from neighboring Thailand and Myanmar, often incorporating fruit.
I am especially fond of anything with passion fruit. 
I had both a hotpot with passion fruit in the soup, and amazing local tomatoes with passion fruit dressing.</p>

<p>  <hy-img root-margin="512px"  src="/assets/img/yunnan/shuiguo.png" alt="local fruit" >    <noscript><img data-ignore  src="/assets/img/yunnan/shuiguo.png" alt="local fruit" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img>
There are some fruits here that I have never tried before, and unfortunately don’t know the name right now.</p>

<p>We checked out one of the coffee plantations. 
  <hy-img root-margin="512px"  src="/assets/img/yunnan/coffee.png" alt="coffee" >    <noscript><img data-ignore  src="/assets/img/yunnan/coffee.png" alt="coffee" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img>
I really enjoyed the local coffee and the surrounding culture. It reminds me a bit of Italy.</p>]]></content><author><name>Andreas Volkmann</name><email>avolkmann@me.com</email></author><category term="blog" /><category term="onsen" /><summary type="html"><![CDATA[An unexpectedly onsen experience in mysterious Yunnan]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://andreasvolkmann.github.io//assets/img/yunnan/bridge.jpg" /><media:content medium="image" url="https://andreasvolkmann.github.io//assets/img/yunnan/bridge.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">⚡ Power Automate - Efficient CSV to JSON</title><link href="https://andreasvolkmann.github.io//blog/software/2025-04-19-flow-perf-csv-to-json/" rel="alternate" type="text/html" title="⚡ Power Automate - Efficient CSV to JSON" /><published>2025-04-19T00:00:00-07:00</published><updated>2025-04-19T00:00:00-07:00</updated><id>https://andreasvolkmann.github.io//blog/software/flow-perf-csv-to-json</id><content type="html" xml:base="https://andreasvolkmann.github.io//blog/software/2025-04-19-flow-perf-csv-to-json/"><![CDATA[<ol id="markdown-toc">
  <li><a href="#split-lines" id="markdown-toc-split-lines">Split Lines</a></li>
  <li><a href="#split-rows" id="markdown-toc-split-rows">Split Rows</a></li>
  <li><a href="#map-to-object" id="markdown-toc-map-to-object">Map to Object</a></li>
  <li><a href="#conclusion" id="markdown-toc-conclusion">Conclusion</a></li>
</ol>

<p>I recently was looking at converting CSV content to JSON in a Power Automate Flow in order to be able to work with it.</p>

<p>Existing articles on this topic seem to all be using inefficient loops so I decided to provide an example of an efficient Data Operations implementation.</p>

<p>The overall flow looks like this:</p>

<p>  <hy-img root-margin="512px"  src="/assets/img/flow_csv-to-json_overview.png" alt="Flow CSV to JSON" >    <noscript><img data-ignore  src="/assets/img/flow_csv-to-json_overview.png" alt="Flow CSV to JSON" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img></p>

<p>High level overview:</p>
<ol>
  <li>HTTP call gets the CSV file content</li>
  <li>Compose to split the lines into an array</li>
  <li>Select to split the rows into an array</li>
  <li>Select to map the rows to objects</li>
  <li>Filter as an example on how to further process the objects</li>
</ol>

<h2 id="split-lines">Split Lines</h2>
<p>Type: Compose</p>

<p>Takes a single CSV string and splits it by new-line into an array of strings</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">skip</span><span class="o">(</span><span class="n">split</span><span class="o">(</span><span class="n">trim</span><span class="o">(</span><span class="n">body</span><span class="o">(</span><span class="err">'</span><span class="no">HTTP</span><span class="err">'</span><span class="o">)),</span> <span class="n">decodeUriComponent</span><span class="o">(</span><span class="err">'</span><span class="o">%</span><span class="mi">0</span><span class="no">D</span><span class="o">%</span><span class="mi">0</span><span class="no">A</span><span class="err">'</span><span class="o">)),</span> <span class="mi">1</span><span class="o">)</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">skip(1)</code> to drop the header</p>

<p><code class="language-plaintext highlighter-rouge">trim</code> to get rid of empty lines</p>

<p><code class="language-plaintext highlighter-rouge">decodeUriComponent('%0D%0A')</code> represents the new-line character</p>

<h2 id="split-rows">Split Rows</h2>

<p>Type: Select</p>

<p>Takes an array of strings and splits them by comma into an array of arrays of strings.</p>

<p>  <hy-img root-margin="512px"  src="/assets/img/flow_csv-to-json_split-rows.png" alt="Split Rows" >    <noscript><img data-ignore  src="/assets/img/flow_csv-to-json_split-rows.png" alt="Split Rows" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">split</span><span class="o">(</span><span class="n">item</span><span class="o">(),</span> <span class="sc">','</span><span class="o">)</span>
</code></pre></div></div>

<h2 id="map-to-object">Map to Object</h2>

<p>Type: Select</p>

<p>We unwrap each nested array into actual objects</p>

<p>For each column, assign <code class="language-plaintext highlighter-rouge">item()?[0]</code> with the corresponding index</p>

<p>  <hy-img root-margin="512px"  src="/assets/img/flow_csv-to-json_map-objects.png" alt="Map to Object" >    <noscript><img data-ignore  src="/assets/img/flow_csv-to-json_map-objects.png" alt="Map to Object" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img></p>

<p>The final output will be an array of objects:</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="nl">"DateModified"</span><span class="p">:</span><span class="w"> </span><span class="s2">"3/25/2025"</span><span class="p">,</span><span class="w">
    </span><span class="err">...</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="err">...</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<h1 id="conclusion">Conclusion</h1>

<p>This is an efficient way to convert CSV to JSON in Power Automate Flow.</p>

<p>The key is to use Data Operations instead of Control Loops.</p>

<p>Looping over even small collections will take seconds as opposed to near-instant data operations.</p>

<p>For more see <a href="/blog/2022-04-09-dataverse-perf-flow-loops">Dataverse Performance - Flow Iteration</a></p>]]></content><author><name>Andreas Volkmann</name><email>avolkmann@me.com</email></author><category term="blog" /><category term="software" /><summary type="html"><![CDATA[Recently had to convert a CSV file to JSON in a Power Automate Flow and found that all existing articles on this are using inefficient loops]]></summary></entry><entry><title type="html">⚗️ Learning from Agents</title><link href="https://andreasvolkmann.github.io//blog/software/2024-07-22-first-agent/" rel="alternate" type="text/html" title="⚗️ Learning from Agents" /><published>2024-07-22T00:00:00-07:00</published><updated>2024-07-22T00:00:00-07:00</updated><id>https://andreasvolkmann.github.io//blog/software/first-agent</id><content type="html" xml:base="https://andreasvolkmann.github.io//blog/software/2024-07-22-first-agent/"><![CDATA[<ol id="markdown-toc">
  <li><a href="#less-is-more" id="markdown-toc-less-is-more">Less is more</a></li>
  <li><a href="#context-is-everything" id="markdown-toc-context-is-everything">Context is everything</a></li>
  <li><a href="#every-token-matters" id="markdown-toc-every-token-matters">Every token matters</a></li>
  <li><a href="#over-anthropomorphization" id="markdown-toc-over-anthropomorphization">Over-Anthropomorphization</a></li>
  <li><a href="#best-practices-still-apply" id="markdown-toc-best-practices-still-apply">Best practices still apply</a></li>
  <li><a href="#hoping-for-better-models" id="markdown-toc-hoping-for-better-models">Hoping for better models</a></li>
</ol>

<p>It’s been some time since <a href="/blog/2023-10-07-first-prompt">my initial impression post on LLMs</a>, 
and since I’ve recently had an opportunity to gather my thoughts, 
I wanted to also summarize them here so that I can come back and see how they changed over time.</p>

<p>The following are rough notes of lessons learned from working with LLMs and the Agent concept.</p>

<h1 id="less-is-more">Less is more</h1>
<ul>
  <li>Usually to improve quality, we take away, rather than adding more</li>
  <li>This means distill your prompts and systems as much as possible</li>
</ul>

<blockquote>
  <p>As you distill your ideas, they naturally improve, because when you drop the merely good parts, the great parts can shine more brightly.</p>
</blockquote>

<ul>
  <li>It’s easy to overdo it with premature planning, fine-tuning, and RAG</li>
  <li>Until there is proven value from such efforts, better to keep it simple</li>
</ul>

<h1 id="context-is-everything">Context is everything</h1>
<ul>
  <li>Agents are tool-driven. Without tools, they cannot do anything and even if you had a super advanced orchestration loop, it wouldn’t help.</li>
  <li>High quality tools are the bread and butter of effective agents</li>
  <li>Emulate a real chat. All context interactions have to account for the fact that models are trained on chat and work best with realistic chat messages.</li>
  <li>As an example, some tools might produce no output, which is an open invitation to hallucinate. Handle special cases so that they produce a coherent chat history.</li>
</ul>

<h1 id="every-token-matters">Every token matters</h1>
<ul>
  <li>Some time ago, we expected that as models got better, they would be less sensitive to minor token variations in prompts.</li>
  <li>It doesn’t seem like this problem has solved itself yet. We still encounter cases where single tokens make or break a scenario. As an example, the difference between singular and plural <code class="language-plaintext highlighter-rouge">Contact</code> -&gt; <code class="language-plaintext highlighter-rouge">Contacts</code> is enough to produce the wrong table name in tests.</li>
  <li>Reduce the noise - Any token can potentially throw off the LLM
    <ul>
      <li>As before, you will want to triple check every single token that makes it into your context, and only include those that add value.</li>
      <li>Make sure your prompts are as distilled and concise as possible. Adopt a zero-tolerance stance towards grammar mistakes and typos.</li>
    </ul>
  </li>
  <li>LLMs increasingly depend on free-text data like names and descriptions. Ensure this data is of high semantic quality, and not too complex.</li>
  <li>Rule of thumb: If it doesn’t make sense to you, it won’t work for the LLM.</li>
  <li>This may also apply to localizations!</li>
  <li>Allow the LLM to focus on what it’s good at
    <ul>
      <li>If possible define data at design time rather
than relying on LLM to re-generate Guids, etc.</li>
    </ul>
  </li>
</ul>

<h1 id="over-anthropomorphization">Over-Anthropomorphization</h1>
<ul>
  <li>The language used to describe LLM-backed products is too close to human semantics</li>
  <li>This leads to expectations that go beyond merely predicting the next token</li>
  <li>We tend to use human verbs like think, know.</li>
  <li>Agent is a bad term that inspires human analogies. An alternative is to consistently use bot or LLM-bot instead as this more clearly communicates expectations to users.</li>
  <li>There is no brain / memory / thought / knowledge.</li>
  <li>Simply put, if critical data is missing from the
context, then it is very unlikely that the LLM will predict the correct tokens.</li>
  <li><a href="https://jurgengravestein.substack.com/p/the-intelligence-paradox">The Intelligence Paradox - by Jurgen Gravestein (substack.com)</a></li>
</ul>

<h1 id="best-practices-still-apply">Best practices still apply</h1>
<ul>
  <li>This is still just software. All previous best practices apply.</li>
  <li>Most importantly: Write tests / eval / benchmark.</li>
  <li>LLM features without tests are like black
boxes (same as any software really)</li>
  <li>You cannot improve what you cannot measure</li>
  <li>I recommend to do as always:
    <ul>
      <li>Iterate with unit tests, incrementally improve with feedback</li>
      <li>Some tests are better than none</li>
      <li>Be smart about what to test. Find test cases that provide relatively stable expectations, but
represent a distinct behavior.</li>
    </ul>
  </li>
</ul>

<h1 id="hoping-for-better-models">Hoping for better models</h1>
<ul>
  <li>Or: The one model to rule them all</li>
  <li>Some time ago a belief emerged that future models would solve prevalent issues with LLMs</li>
  <li><a href="https://crfm.stanford.edu/helm/lite/latest/">Holistic Evaluation of Language Models (HELM) (stanford.edu)</a></li>
  <li>While GPT-4o does seem to be the best model on average, it is not significantly outperforming GPT-4 (0613), which at this point is over a year old.</li>
  <li>Think back one year and what expectations we had back then for where we would be by now. Given how quickly GPT 3.5 and 4 dropped, people were led to believe that we would have some truly amazing next version by mid-2024.</li>
  <li>New models are different, not just better
    <ul>
      <li>While we did get many new models (gpt 4 turbo and now 4o), it’s not entirely clear whether they are improvements across the board</li>
      <li>Ultimately there hasn’t been any groundbreaking improvement in LLM output quality since GPT 4.</li>
    </ul>
  </li>
  <li>Eventually GPT-5. But at what cost?
  <hy-img root-margin="512px"  src="/assets/img/gpt5whale.jpeg" alt="GPT-5" >    <noscript><img data-ignore  src="/assets/img/gpt5whale.jpeg" alt="GPT-5" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img>
    <ul>
      <li>Realism comes at the cost of coverage</li>
      <li><a href="https://gorilla.cs.berkeley.edu/leaderboard.html#:~:text=The%20Berkeley%20Function%20Calling%20Leaderboard,and%20will%20be%20updated%20periodically.">Berkeley Function Calling Leaderboard (aka Berkeley Tool Calling Leaderboard)</a></li>
      <li>LLM systems are more than their largest model</li>
      <li>While we can expect to eventually get GPT 5 or the like (much better?), we are still constrained by COGS, which are likely higher. So
we may want to explore SMLs, etc., and alternative approaches to improve</li>
      <li>SLMs getting good at specific tasks. JIT model selection may help balance cost / quality. See <a href="https://github.com/lm-sys/RouteLLM">GitHub - lm-sys/RouteLLM: A framework for serving and evaluating LLM routers - save LLM costs without compromising quality!</a></li>
    </ul>
  </li>
</ul>

<p>Those are my current thoughts. Excited to see how they will have changed in 6 months - 1 year’s time!</p>]]></content><author><name>Andreas Volkmann</name><email>avolkmann@me.com</email></author><category term="blog" /><category term="software" /><summary type="html"><![CDATA[LLMs round 2 - lessons learned from working with agents]]></summary></entry><entry><title type="html">♨️ Onsen City</title><link href="https://andreasvolkmann.github.io//blog/onsen/2024-04-28-onsen-city/" rel="alternate" type="text/html" title="♨️ Onsen City" /><published>2024-04-28T00:00:00-07:00</published><updated>2024-04-28T00:00:00-07:00</updated><id>https://andreasvolkmann.github.io//blog/onsen/onsen-city</id><content type="html" xml:base="https://andreasvolkmann.github.io//blog/onsen/2024-04-28-onsen-city/"><![CDATA[<ol id="markdown-toc">
  <li><a href="#yuyama-no-sato-湯山の里" id="markdown-toc-yuyama-no-sato-湯山の里">Yuyama no Sato 湯山の里</a></li>
  <li><a href="#ebisu-湯屋えびす" id="markdown-toc-ebisu-湯屋えびす">Ebisu 湯屋えびす</a></li>
  <li><a href="#nabeyama-鍋山の湯" id="markdown-toc-nabeyama-鍋山の湯">Nabeyama 鍋山の湯</a></li>
  <li><a href="#kannawa-鉄輪温泉" id="markdown-toc-kannawa-鉄輪温泉">Kannawa 鉄輪温泉</a></li>
  <li><a href="#shibaseki-紫関温泉" id="markdown-toc-shibaseki-紫関温泉">Shibaseki 紫関温泉</a></li>
  <li><a href="#suginoi-area" id="markdown-toc-suginoi-area">Suginoi area</a>    <ol>
      <li><a href="#horita-堀田温泉" id="markdown-toc-horita-堀田温泉">Horita 堀田温泉</a></li>
      <li><a href="#mugen-no-sato-夢幻の里" id="markdown-toc-mugen-no-sato-夢幻の里">Mugen no Sato 夢幻の里</a></li>
      <li><a href="#suginoi-hotel-杉乃井ホテル" id="markdown-toc-suginoi-hotel-杉乃井ホテル">Suginoi Hotel 杉乃井ホテル</a></li>
    </ol>
  </li>
</ol>

<p>Finally made it to Beppu, AKA Onsen City!</p>

<p>Initially, I was doubtful whether this was the best choice for a great Onsen experience in Japan.</p>

<p>Most reports I read didn’t praise it too highly and generally dedicated little time to it.</p>

<p>Beppu turned out to be my favorite place this time and I ended up pulling in extra days to extend my stay here.</p>

<p>I highly recommend going if you enjoy onsen, as there is a lot of variety, and it’s a great place to relax.</p>

<p>I’ll showcase a few of my favorite places below.</p>

<h1 id="yuyama-no-sato-湯山の里">Yuyama no Sato 湯山の里</h1>

<p>This onsen village lies just behind Myoban (明礬), so I kind of count it into the same area.</p>

<p>After a quick checkin with the owner, who built the entire place himself,
there’s a small 5 min hike through a small bamboo forest, down to then onsen.</p>

<p>Since we didn’t meet anyone else here, this would be my secret tip.</p>

<p>  <hy-img root-margin="512px"  src="/assets/img/yuyama.png" alt="Yuyama Main Bath" >    <noscript><img data-ignore  src="/assets/img/yuyama.png" alt="Yuyama Main Bath" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img></p>

<p>  <hy-img root-margin="512px"  src="/assets/img/yuyama_2.png" alt="Yuyama waterfall" >    <noscript><img data-ignore  src="/assets/img/yuyama_2.png" alt="Yuyama waterfall" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img></p>

<p>  <hy-img root-margin="512px"  src="/assets/img/yuyama_3.png" alt="Yuyama river" >    <noscript><img data-ignore  src="/assets/img/yuyama_3.png" alt="Yuyama river" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img></p>

<p>There is an abundance of different pools, with the temperature on the hotter side.</p>

<h1 id="ebisu-湯屋えびす">Ebisu 湯屋えびす</h1>

<p>Located in Myoban (明礬). They have both shared and private baths.</p>

<p>  <hy-img root-margin="512px"  src="/assets/img/ebisu_1.png" alt="Ebisu" >    <noscript><img data-ignore  src="/assets/img/ebisu_1.png" alt="Ebisu" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img>
  <hy-img root-margin="512px"  src="/assets/img/ebisu_2.png" alt="Ebisu geranium" >    <noscript><img data-ignore  src="/assets/img/ebisu_2.png" alt="Ebisu geranium" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img>
  <hy-img root-margin="512px"  src="/assets/img/ebisu_3.png" alt="Ebisu outdoor" >    <noscript><img data-ignore  src="/assets/img/ebisu_3.png" alt="Ebisu outdoor" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img>
  <hy-img root-margin="512px"  src="/assets/img/ebisu_4.png" alt="Ebisu private" >    <noscript><img data-ignore  src="/assets/img/ebisu_4.png" alt="Ebisu private" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img></p>

<h1 id="nabeyama-鍋山の湯">Nabeyama 鍋山の湯</h1>

<p>There are a few free onsen pools in the mountains a small hike away from Myoban (明礬).</p>

<p>The water wasn’t quite warm enough when I got there, so it can be hit or miss, but the hike is nice and the views good, too.</p>

<h1 id="kannawa-鉄輪温泉">Kannawa 鉄輪温泉</h1>

<p>Cozy little district with steam coming out of the ground everywhere.</p>

<p>Cats chilling, sometimes hiding their head in a crack in the ground to keep warm.</p>

<p>Tons of small ~100¥ Onsen which make it fun to hop from one to the other.</p>

<h1 id="shibaseki-紫関温泉">Shibaseki 紫関温泉</h1>

<p>Don’t have any pictures of this one, but very worth a visit.</p>

<p>They have a very hot indoor pool, a relaxing outdoor pool, and an amazing sauna!</p>

<p>The locals are super fun here :)</p>

<h1 id="suginoi-area">Suginoi area</h1>

<p>This refers to the south-western part of Beppu, where the Suginoi Hotel is located.</p>

<p>Since these places are closely located, I group them under this moniker.</p>

<h2 id="horita-堀田温泉">Horita 堀田温泉</h2>
<p>  <hy-img root-margin="512px"  src="/assets/img/horita.png" alt="Horita Men's bath" >    <noscript><img data-ignore  src="/assets/img/horita.png" alt="Horita Men's bath" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img></p>

<h2 id="mugen-no-sato-夢幻の里">Mugen no Sato 夢幻の里</h2>

<p>Consists of multiple private onsen, which you can rent for 1h for very little money (I think 1000?).</p>

<p>  <hy-img root-margin="512px"  src="/assets/img/mugen-no-sato-yu.png" alt="Mugen no Sato private bath" >    <noscript><img data-ignore  src="/assets/img/mugen-no-sato-yu.png" alt="Mugen no Sato private bath" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img></p>

<p>You can also steam your own food here, using the steam from the water.</p>

<p>  <hy-img root-margin="512px"  src="/assets/img/mugen-no-sato-mushi.png" alt="Mugen no Sato steam cooking area" >    <noscript><img data-ignore  src="/assets/img/mugen-no-sato-mushi.png" alt="Mugen no Sato steam cooking area" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img></p>

<p>Recommend to capitalize on this and bring lots of raw ingredients.</p>

<p>Things like Kabocha turn out great.</p>

<h2 id="suginoi-hotel-杉乃井ホテル">Suginoi Hotel 杉乃井ホテル</h2>

<p>This hotel has a rooftop outdoor pool area for swimming (heated) and an onsen area with amazing views over the Beppu bay.</p>

<p>Suggest to time your visit for sunset and enjoy the evening here.</p>

<p>  <hy-img root-margin="512px"  src="/assets/img/suginoi_1.avif" alt="Suginoi Onsen" >    <noscript><img data-ignore  src="/assets/img/suginoi_1.avif" alt="Suginoi Onsen" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img></p>

<p>  <hy-img root-margin="512px"  src="/assets/img/suginoi_2.jpg" alt="Suginoi Swimming Pools" >    <noscript><img data-ignore  src="/assets/img/suginoi_2.jpg" alt="Suginoi Swimming Pools" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img></p>

<hr />

<p>For more Onsen, see <a href="/blog/2022-10-30-onsen">some of my favorite hot springs</a>.</p>]]></content><author><name>Andreas Volkmann</name><email>avolkmann@me.com</email></author><category term="blog" /><category term="onsen" /><summary type="html"><![CDATA[An entire city of onsen exceeding expectations]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://andreasvolkmann.github.io//assets/img/onsen_beppu.jpg" /><media:content medium="image" url="https://andreasvolkmann.github.io//assets/img/onsen_beppu.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">⚗️ Distilled knowledge</title><link href="https://andreasvolkmann.github.io//blog/software/2023-10-07-first-prompt/" rel="alternate" type="text/html" title="⚗️ Distilled knowledge" /><published>2023-10-07T00:00:00-07:00</published><updated>2023-10-07T00:00:00-07:00</updated><id>https://andreasvolkmann.github.io//blog/software/first-prompt</id><content type="html" xml:base="https://andreasvolkmann.github.io//blog/software/2023-10-07-first-prompt/"><![CDATA[<ol id="markdown-toc">
  <li><a href="#the-intersection-of-programming-and-language" id="markdown-toc-the-intersection-of-programming-and-language">The intersection of programming and language</a></li>
  <li><a href="#distilling-prompts" id="markdown-toc-distilling-prompts">Distilling prompts</a>    <ol>
      <li><a href="#less-is-more" id="markdown-toc-less-is-more">Less is more</a></li>
      <li><a href="#forcing-the-model-" id="markdown-toc-forcing-the-model-">Forcing the model …</a></li>
      <li><a href="#native-code-intuition" id="markdown-toc-native-code-intuition">Native code intuition</a></li>
    </ol>
  </li>
  <li><a href="#language-efficiency" id="markdown-toc-language-efficiency">Language efficiency</a></li>
  <li><a href="#outro" id="markdown-toc-outro">Outro</a></li>
</ol>

<p>For this post I want to record some of my first impressions of LLMs and prompting,
as well as some of the insights I believe to have gained.
It will be interesting to revisit this later on and see how it held up.</p>

<h2 id="the-intersection-of-programming-and-language">The intersection of programming and language</h2>

<p>I anticipate a new paradigm at the intersection of programming and language understanding.</p>

<p>LLMs are now capable enough so that software engineers can take off-the-shelf models and build applications with them.
In order to instruct the model, prompts are written in natural language, just like the outputs.
The hurdle of data science is no longer.</p>

<p>Anyone can write such prompts, but to truly develop reliable, effective prompts,
it seems to me one has to develop an understanding and intuition about the way the LLM speaks and comprehends language.</p>

<p>At the same time, it’s not enough to just be good at prompting.
One also needs a methodical approach to evaluate the results of the model.
This is where programming concepts like unit testing come in handy.
If you want to take your prompts to the next level, find a metric that measures the output quality,
then apply TDD (Test Driven Development) to push the prompt to its limits, by continuously testing and refining.</p>

<p>This is already being done at the model level, yielding the below chart,
which can help visualize the strengths &amp; weaknesses of each model.
<a href="https://browse.arxiv.org/pdf/2309.16583.pdf">  <hy-img root-margin="512px"  src="/assets/img/llm_model_strength_weakness.png" alt="Model Strengths &amp; Weaknesses" >    <noscript><img data-ignore  src="/assets/img/llm_model_strength_weakness.png" alt="Model Strengths &amp; Weaknesses" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img></a></p>

<p>Once you’ve tried to combine plain programming with LLM prompts,
you might agree with me that this is the next big step for our industry.</p>

<p>I recommend <a href="https://open.spotify.com/episode/3MK8V1DbT7d5YEBlrdbBdQ">this Latent Space episode</a>, which coins the term
AI Engineer to define software engineers moving closer to the ML space to get enough proficiency to effectively apply
LLMs to produce new applications.</p>

<h2 id="distilling-prompts">Distilling prompts</h2>

<p>The art of prompting is still in its infancy and no exact science.
I don’t claim to have all the answers, but the following has worked well for me.</p>

<blockquote>
  <ul>
    <li>Most of this applies to GPT 3.5 0613</li>
    <li>Primarily targeting Reductive Operations, such as Summarization and Extraction</li>
  </ul>
</blockquote>

<p>When writing prompts, I have observed the following tendencies.</p>

<h3 id="less-is-more">Less is more</h3>

<blockquote>
  <p>You are like this tea cup, so full that nothing more can be added. Come
back to me when the cup is empty. Come back to me with an empty mind.</p>

  <p><em>Laozi</em></p>
</blockquote>

<p>Being overly prescriptive, wordy, and detailed.</p>

<p>Lots of rules, and when something doesn’t quite turn out how we want it to, we add another special case sentence.
The prompt ends up overloaded so that any single change, formatting or content, breaks it.
In such cases it is better to go back to zero, and come back witn an empty mind / prompt.</p>

<p>Try to distill your prompt down to the most essential meaning.
Every single word in your prompt matters, and there should be a reason for why you include it.</p>

<p>Just like we do with language and code,
in order to really convey our intent,
we distill our prompt down to its essence.</p>

<blockquote>
  <p>Distillation is at the very heart of all effective communication.
The more important it is that your audience hear and take action on your message,
the more distilled that message needs to be.</p>

  <p><em>Building a Second Brain by Tiago Forte</em></p>
</blockquote>

<p>Lastly, it’s worth noting that the same meaning phrased differently can lead to radically different results.
So rather than throw more words at it, I prefer to find few words which trigger the right response.</p>

<h3 id="forcing-the-model-">Forcing the model …</h3>

<p>… to do something it isn’t good at.</p>

<p>Outputting JSON or producing answers that require non-language thinking.</p>

<p>Instead of trying to control the output with rules and confusing the model with complex instructions where even we have to think,
I found that starting out with a highly distilled version (as little as a single sentence)
can shed some light on what the model is good at natively.</p>

<p>So rather than trying to bend the model to your will, try to <em>cooperate</em>!</p>

<p>I found that oftentimes you don’t have to instruct 3.5 about the output format at all.
It tends to produce colon-delimited key-value pairs if only you change your wording slightly.
<code class="language-plaintext highlighter-rouge">Provide X, Y, Z ...</code> seems to work well, where XYZ are properties that start with a captial letter.</p>

<p>You can save yourself lots of trouble by simply going with the flow of whatever the LLM is comfortable with.</p>

<h3 id="native-code-intuition">Native code intuition</h3>

<p>GPT 3.5 seems to have very good intuition about coding concepts.
As software engineers, this gives us superpowers, as we can boil down complex intent into sometimes single characters.</p>

<p>As an example, if you use extraction prompts like the above, you can easily communicate that you want certain
properties to be nullable/optional: <code class="language-plaintext highlighter-rouge">Provide X, Y?, Z ...</code>.
Just by appending <code class="language-plaintext highlighter-rouge">?</code> to the property, the model will often prefer to omit rather than invent outputs.</p>

<h2 id="language-efficiency">Language efficiency</h2>
<p>One other thing I observed is that English is a pretty good language for prompts. 
Usually one of the drawbacks of English is that it requires a lot of characters compared to languages like Chinese.</p>

<p>Twitter used to have a really low character limit per tweet, which was easily consumed in “western” languages.
Character-based writing systems can simply fit more meaning into a single tweet.
It’s part of the reason why
<a href="https://fortune.com/2022/11/23/elon-musk-twitter-japan-users-layoffs-moderation/">Musk stated that Twitter’s ideal market isn’t the U.S.—it’s Japan</a> (behind paywall but you can sidestep with reader).
I explore some of the reasons why Japanese is more concise in <a href="/blog/2021-07-25-topic-markers-in-language-design">Language features across the boundary</a>.</p>

<p>However, what matters in prompts are tokens, not characters, and from my experience the tokenization of English is quite efficient. 
A lot of words are encoded as a single token, which means they can compete with Chinese characters. 
<a href="https://platform.openai.com/tokenizer">  <hy-img root-margin="512px"  src="/assets/img/gpt_tokenizer.png" alt="GPT Tokenizer" >    <noscript><img data-ignore  src="/assets/img/gpt_tokenizer.png" alt="GPT Tokenizer" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img></a></p>

<h2 id="outro">Outro</h2>

<p>The above is just a snapshot of my current ideas. Excited to see where things are at in a few months.
Currently reading <a href="https://www.goodreads.com/book/show/59616977-building-a-second-brain">Building a Second Brain by Tiago Forte</a>,
and it is amazing how much of it applies to LLMs / prompting.</p>

<blockquote>
  <p>[…] if you’re stuck on a task, break it down into smaller steps.</p>
</blockquote>

<p>This aligns with <a href="https://arxiv.org/abs/2201.11903">the Chain-of-Thought principle</a> for prompts.</p>

<blockquote>
  <p>As you distill your ideas, they naturally improve, because when you drop the merely good parts, the great parts can shine more brightly.</p>
</blockquote>

<p>Similar to what I wrote about distillation above.</p>

<p>Lastly, I found this example from the book very interesting:</p>

<blockquote>
  <p>Coppola’s strategy for making the complex, multifaceted film rested on a technique he learned studying theater at Hofstra College, known as a “<strong>prompt book</strong>.”</p>

  <p>Coppola considered the prompt book that emerged from this process the most important asset in the production of his now classic film: “the script was really an unnecessary document; I didn’t need a script because I could have made the movie just from this notebook.”</p>
</blockquote>

<p>Basically <a href="https://en.wikipedia.org/wiki/Francis_Ford_Coppola">Coppola</a> was prompting himself with this book, which enabled him to produce The Godfather without the full script.
Sounds like he had enough training data :)</p>]]></content><author><name>Andreas Volkmann</name><email>avolkmann@me.com</email></author><category term="blog" /><category term="software" /><summary type="html"><![CDATA[To attain knowledge, add things every day. To attain wisdom, remove things every day. (*Laozi*)]]></summary></entry><entry><title type="html">🎨 DRY the paint on your Cross Cutting Concerns</title><link href="https://andreasvolkmann.github.io//blog/software/2023-02-12-dry-srp-caching/" rel="alternate" type="text/html" title="🎨 DRY the paint on your Cross Cutting Concerns" /><published>2023-02-12T00:00:00-08:00</published><updated>2023-02-12T00:00:00-08:00</updated><id>https://andreasvolkmann.github.io//blog/software/dry-srp-caching</id><content type="html" xml:base="https://andreasvolkmann.github.io//blog/software/2023-02-12-dry-srp-caching/"><![CDATA[<ol id="markdown-toc">
  <li><a href="#scenario" id="markdown-toc-scenario">Scenario</a>    <ol>
      <li><a href="#requirements" id="markdown-toc-requirements">Requirements</a></li>
    </ol>
  </li>
  <li><a href="#techniques" id="markdown-toc-techniques">Techniques</a>    <ol>
      <li><a href="#simple-approach" id="markdown-toc-simple-approach">Simple approach</a></li>
      <li><a href="#dynamic-dispatch" id="markdown-toc-dynamic-dispatch">Dynamic dispatch</a></li>
      <li><a href="#query-pattern" id="markdown-toc-query-pattern">Query pattern</a></li>
      <li><a href="#aspect-oriented-programming-aop" id="markdown-toc-aspect-oriented-programming-aop">Aspect Oriented Programming (AOP)</a></li>
    </ol>
  </li>
  <li><a href="#conclusion" id="markdown-toc-conclusion">Conclusion</a></li>
</ol>

<p>There are many techniques of varying sophistication to achieve clean cross cutting concerns. 
Let’s walk through some of them and discuss their pros and cons.</p>

<blockquote>
  <p>This post mostly serves as a reference for myself, to gather my thoughts.
I won’t bother with implementation details and sample code may not compile.</p>
</blockquote>

<h1 id="scenario">Scenario</h1>

<p>Imagine we have a repository that fetches weather data from a database.</p>

<p>It could look similar to the below, but assume many more methods.</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">interface</span> <span class="nc">IWeatherRepository</span>
<span class="p">{</span>
    <span class="n">WeatherForecast</span> <span class="nf">GetForecast</span><span class="p">();</span>

    <span class="kt">int</span> <span class="nf">GetTemperature</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="requirements">Requirements</h2>
<p>We will evaluate the techniques based on the following requirements:</p>

<ol>
  <li>We don’t really care about the implementation, 
but we want to start applying some caching to avoid repeated database calls, 
as we have a lot of read requests coming in and the data won’t change for some time.
    <ul>
      <li>Bonus points for not needing to duplicate the caching code in each method.</li>
    </ul>
  </li>
  <li>Initially we can use a memory cache, but later we might want to switch to a distributed cache.
    <ul>
      <li>Bonus points for least amount of changes needed to switch the caching implementation.</li>
    </ul>
  </li>
  <li>We want to apply other cross-cutting concerns to the repository, like logging.
    <ul>
      <li>Bonus points for ease of extensibility and maintainability.</li>
    </ul>
  </li>
  <li>Lastly, we want to be able to test the repository without caching and logging.</li>
</ol>

<h1 id="techniques">Techniques</h1>

<h2 id="simple-approach">Simple approach</h2>
<p>Often the first approach that comes to mind is to inject a cache and add the caching logic to each of the methods.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">WeatherRepositoryWithCache</span> <span class="p">:</span> <span class="n">IWeatherRepository</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IMemoryCache</span> <span class="n">cache</span><span class="p">;</span>

    <span class="k">public</span> <span class="n">WeatherForecast</span> <span class="nf">GetForecast</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="n">cache</span><span class="p">.</span><span class="nf">GetOrCreate</span><span class="p">(</span>
        <span class="k">nameof</span><span class="p">(</span><span class="n">GetForecast</span><span class="p">),</span>
        <span class="n">entry</span> <span class="p">=&gt;</span> <span class="n">Extensions</span><span class="p">.</span><span class="nf">GetDemoForecast</span><span class="p">());</span>

    <span class="k">public</span> <span class="k">virtual</span> <span class="kt">int</span> <span class="nf">GetTemperature</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="n">cache</span><span class="p">.</span><span class="nf">GetOrCreate</span><span class="p">(</span>
        <span class="k">nameof</span><span class="p">(</span><span class="n">GetTemperature</span><span class="p">),</span>
        <span class="n">entry</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">Random</span><span class="p">().</span><span class="nf">Next</span><span class="p">(-</span><span class="m">10</span><span class="p">,</span> <span class="m">40</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div>

<p>It might seem simple at first, but once you start applying this at scale,
you will quickly realize that this is not maintainable.
Think about tens of repository classes, each with tens of methods.</p>

<h2 id="dynamic-dispatch">Dynamic dispatch</h2>
<p>By overriding the methods in our repository, we can achieve separation of concerns between
the business logic and the caching.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">CachedWeatherRepository</span> <span class="p">:</span> <span class="n">WeatherRepository</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">MemoryCache</span> <span class="n">cache</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">override</span> <span class="n">WeatherForecast</span> <span class="nf">GetForecast</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">key</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DateOnly</span><span class="p">();</span>
        <span class="k">return</span> <span class="n">cache</span><span class="p">.</span><span class="n">GetOrCreate</span><span class="p">&lt;</span><span class="n">WeatherForecast</span><span class="p">&gt;(</span>
            <span class="n">key</span><span class="p">,</span>
            <span class="n">entry</span> <span class="p">=&gt;</span> <span class="k">base</span><span class="p">.</span><span class="nf">GetForecast</span><span class="p">());</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now we have a semi-central place for caching, although it still has to be duplicated per repository class.
We also still have to duplicate the caching logic in each method.</p>

<p>Note that this requires the methods to be virtual. We can work around this limitation with the decorator pattern.</p>

<p>Given <code class="language-plaintext highlighter-rouge">n</code> repositories, and <code class="language-plaintext highlighter-rouge">m</code> cross-cutting concerns, we would need <code class="language-plaintext highlighter-rouge">n * m</code> subclasses.
Simple code, but not maintainable.</p>

<h2 id="query-pattern">Query pattern</h2>
<p>This approach combines several patterns to achieve high flexibility.</p>

<p>The central idea is to treat any request to the database as a query object, which is passed to an executor.
Contrary to their name, these query objects actually implement the command pattern,
meaning they encapsulate a set of instructions that can be defined separately from their execution.</p>

<p>Usually, you will have some interface like this at the top level:</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">interface</span> <span class="nc">IQuery</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
<span class="p">{</span>
    <span class="n">T</span> <span class="nf">Execute</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Important is that these queries can be newed without any dependencies.
We can then isolate the query specification / construction by using a factory.
The concrete implementation depends on your database.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">sealed</span> <span class="k">class</span> <span class="nc">QueryFactory</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="n">IQuery</span><span class="p">&lt;</span><span class="n">WeatherForecast</span><span class="p">&gt;</span> <span class="nf">BuildForecastQuery</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">QueryExpression</span><span class="p">(...);</span>
    
    <span class="k">public</span> <span class="n">IQuery</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">BuildTemperatureQuery</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">QueryExpression</span><span class="p">(...);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Using the decorator pattern, we can wrap the core query logic with additional behavior.</p>

<p>Combining this, you will end up with something like this:</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">QueryWeatherRepository</span> <span class="p">:</span> <span class="n">IWeatherRepository</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">QueryExecutor</span> <span class="n">queryExecutor</span><span class="p">;</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">QueryFactory</span> <span class="n">queryFactory</span><span class="p">;</span>
    
    <span class="k">public</span> <span class="n">WeatherForecast</span> <span class="nf">GetForecast</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">query</span> <span class="p">=</span> <span class="n">queryFactory</span><span class="p">.</span><span class="nf">BuildForecastQuery</span><span class="p">()</span>
            <span class="p">.</span><span class="nf">UseCaching</span><span class="p">()</span> <span class="c1">// extensions that leverage the decorator pattern</span>
            <span class="p">.</span><span class="nf">UseLogging</span><span class="p">();</span>
        <span class="k">return</span> <span class="n">queryExecutor</span><span class="p">.</span><span class="nf">Execute</span><span class="p">(</span><span class="n">query</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>No subclassing, no virtual methods, no need to duplicate the caching or logging logic.</p>

<p>A downside is that you have to think and come up with a setup for this.</p>

<p>Let’s check off the requirements:</p>
<ul>
  <li>No duplicated caching logic</li>
  <li>Switching caching implementation only touches a single class (caching decorator)</li>
  <li>We can add any cross-cutting concern by adding a decorator</li>
  <li>We can test the queries independently</li>
</ul>

<p>One more thing to observe is how our code becomes much more declarative and high level.
Our repository no longer dishes out specific, brittle instructions. 
Rather, we specify the behavior we would like to see and rely on the framework to execute it.</p>

<h2 id="aspect-oriented-programming-aop">Aspect Oriented Programming (AOP)</h2>
<p>Although I haven’t had a chance to try AOP in C# yet,
I am familiar with <a href="https://en.wikipedia.org/wiki/AspectJ">AspectJ</a> and <a href="/blog/2020-02-20-spring-kotlin-gradle-aop/">Spring AOP</a>.</p>

<p><a href="https://www.postsharp.net/caching">PostSharp</a> is similar to Spring, with the main downside that it is commercial.
We can add caching with a few attributes:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nf">CacheConfiguration</span><span class="p">(</span><span class="n">AbsoluteExpiration</span> <span class="p">=</span> <span class="m">10</span><span class="p">)]</span>
<span class="k">public</span> <span class="k">sealed</span> <span class="k">class</span> <span class="nc">WeatherRepository</span> <span class="p">:</span> <span class="n">IWeatherRepository</span>
<span class="p">{</span>
    <span class="p">[</span><span class="n">Cache</span><span class="p">]</span>
    <span class="k">public</span> <span class="n">WeatherForecast</span> <span class="nf">GetForecast</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="k">throw</span> <span class="nf">NotImplementedException</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This is easily the cleanest approach, requiring the least amount of code.
You can add more behavior like logging or retry simply by adding the corresponding attributes.</p>

<p>It feels like magic, which is sometimes claimed to be a bad thing.
I for one believe AOP is a true boon to software development.
One downside is the framework buy-in.</p>

<p>Even if you don’t use AOP in your daily work,
I still highly recommend learning about it on your own time.
It gives you a new perspective that will help you
identify and solve architectural problems in your code.</p>

<p>In particular, I found this course to be a great learning resource:</p>
<ul>
  <li><a href="https://www.pluralsight.com/courses/aspect-oriented-programming-spring-aspectj">Aspect Oriented Programming (AOP) using Spring AOP and AspectJ
by Eberhard Wolff</a></li>
</ul>

<h1 id="conclusion">Conclusion</h1>

<p>My personal favorite is the AOP approach, when available.
Otherwise the query pattern is a good alternative that offers a lot of flexibility.</p>

<p>The simpler patterns can be used during POC,
but any non-trivial app will benefit from a clear-defined architecture.</p>]]></content><author><name>Andreas Volkmann</name><email>avolkmann@me.com</email></author><category term="blog" /><category term="software" /><summary type="html"><![CDATA[Techniques to achieve clean cross cutting concerns]]></summary></entry><entry><title type="html">♨️ My favorite hot springs 2022</title><link href="https://andreasvolkmann.github.io//blog/onsen/2022-10-30-onsen/" rel="alternate" type="text/html" title="♨️ My favorite hot springs 2022" /><published>2022-10-30T00:00:00-07:00</published><updated>2022-10-30T00:00:00-07:00</updated><id>https://andreasvolkmann.github.io//blog/onsen/onsen</id><content type="html" xml:base="https://andreasvolkmann.github.io//blog/onsen/2022-10-30-onsen/"><![CDATA[<ol id="markdown-toc">
  <li><a href="#yakushima" id="markdown-toc-yakushima">Yakushima</a></li>
  <li><a href="#ischia" id="markdown-toc-ischia">Ischia</a></li>
  <li><a href="#são-miguel" id="markdown-toc-são-miguel">São Miguel</a>    <ol>
      <li><a href="#furnas" id="markdown-toc-furnas">Furnas</a></li>
    </ol>
  </li>
  <li><a href="#conclusion" id="markdown-toc-conclusion">Conclusion</a></li>
</ol>

<p>The best (and most) hot springs are, no doubt, in onsen-country, Japan ♨️.
However, there are still worthwhile alternatives in sometimes unexpected locations
that I would recommend checking out. 
So instead of covering some of the famous onsen towns of Japan, let’s talk about some of the lesser-known options.</p>

<p>In particular, I am very fond of 海中温泉, meaning hot springs in the ocean.
These hot springs developed naturally on the coast, which makes them quite unique.</p>

<h1 id="yakushima">Yakushima</h1>
<p>This small island south of the Japanese mainland is one of my favorite places in Japan, 
not least because of its amazing hot springs!</p>

<p>  <hy-img root-margin="512px"  src="/assets/img/yakushima.jpg" alt="Yakushima is beautiful" >    <noscript><img data-ignore  src="/assets/img/yakushima.jpg" alt="Yakushima is beautiful" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img></p>

<p>The <a href="https://www.town.yakushima.kagoshima.jp/cust-facility/1421/">Hirauchi Kaichuu Onsen - 平内海中温泉</a> lies at the coast of the island and its basins
are filled with ocean water. 
It’s basically free, but you are encouraged to donate a few hundred yen to the locals maintaining it.</p>

<p>  <hy-img root-margin="512px"  src="/assets/img/onsen_hirauchi.jpg" alt="The Hirauchi hot spring" >    <noscript><img data-ignore  src="/assets/img/onsen_hirauchi.jpg" alt="The Hirauchi hot spring" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img></p>

<p>One of the coolest experiences is to come here in the night and enjoy the starry sky whilst taking a hot bath.
There are various temperatures to choose from in the basins, but a little caution is required as some can get very hot.</p>

<p>We were here at the end of the year and the weather was amazing.
Moderate temperature, sunny sky, tasty local produce like Ponkan, superb nature, and hot springs in the night 
made Yakushima one of my favorite destinations.</p>

<h1 id="ischia">Ischia</h1>
<p>Ischia is an island off the coast of Napoli in Italy.</p>

<p>  <hy-img root-margin="512px"  src="/assets/img/ischia.jpg" alt="Ischia is an island" >    <noscript><img data-ignore  src="/assets/img/ischia.jpg" alt="Ischia is an island" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img></p>

<p>It’s a popular tourist destination and unfortunately we made the mistake of coming here during the summer, 
meaning it was very crowded and our overall experience wasn’t the best.</p>

<p>Besides some negative experiences, 
what saved the trip was our discovery of a hot spring in the ocean in the island’s southern part.</p>

<p>  <hy-img root-margin="512px"  src="/assets/img/onsen_baia_di_sorgeto.jpg" alt="Baia di Sorgeto Ischia" >    <noscript><img data-ignore  src="/assets/img/onsen_baia_di_sorgeto.jpg" alt="Baia di Sorgeto Ischia" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img></p>

<p>Baia di Sorgeto is a little more difficult to access, but worth it every time.
We spent every evening here. As it is entirely natural, this onsen is also free.
There are a number of other (commercial) hot springs on the island, but they were all closed due to Covid.
Even so, I felt the trip was worth it because Baia di Sorgeto was outstanding.</p>

<h1 id="são-miguel">São Miguel</h1>
<p>In the middle of the atlantic ocean lie the Azores, a group of Portugese islands, the biggest of which is São Miguel.</p>

<p>  <hy-img root-margin="512px"  src="/assets/img/sao_miguel.jpg" alt="São Miguel" >    <noscript><img data-ignore  src="/assets/img/sao_miguel.jpg" alt="São Miguel" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img></p>

<p>I decided to visit because of the many similarities to Japan / Yakushima: 
A volcanic island with lush, green vegetation, warm but rainy weather, tea plantations, and of course hot springs ♨️.</p>

<p>It’s a bit difficult to get here, as there aren’t many international flights, 
so the most likely route is via Portugal’s mainland.</p>

<p>Anyway it’s worth the effort, as this island has so much to offer.</p>

<p>Caldeira Velha is like a little trip through the jungle, with hot springs along the way. 
Although there is only one smaller basin with really hot water, it’s a very atmospheric and relaxing journey.
  <hy-img root-margin="512px"  src="/assets/img/onsen_caldeiravelha.jpg" alt="Caldeira Velha" >    <noscript><img data-ignore  src="/assets/img/onsen_caldeiravelha.jpg" alt="Caldeira Velha" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img></p>

<hr />

<p>Then there is Termas das Caldeiras, a smaller hot spring bath. 
We put this one off because it seemed too small from the reviews.
In the end we did have an opportunity to try it, and it became one of our favorite experiences.
The pools are small but we were lucky that there were few people and at some point we were even alone.
Later on someone performed a few songs on a handpan.
This was the best meditative atmosphere in any hot spring here.
This place also has probably the hottest pool available.</p>

<hr />

<p>There is also an onsen in the sea, but we had no luck with the tide, so the water wasn’t warm enough.
  <hy-img root-margin="512px"  src="/assets/img/onsen_ponta_ferraria.jpg" alt="Ponta Ferraria" >    <noscript><img data-ignore  src="/assets/img/onsen_ponta_ferraria.jpg" alt="Ponta Ferraria" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img>
This hot spring goes by the name Ponta Ferraria, but it’s a little further away from everything so we didn’t try again.</p>

<h2 id="furnas">Furnas</h2>
<p>Then there is the little onsen town Furnas. I recommend staying here to maximize your time in the hot springs.
Furnas is quite popular among locals and tourists, so expect a lot of traffic. 
Therefore, it’s better to be close by and flexible so that you can time your visits and spend extended time 
in the hot springs without having to worry about getting back home.</p>

<p>First up, the Poça da Dona Beija, which consists of several medium-size pools of depth.
Definitely check it out, but be aware that it gets busy towards the evening.</p>

<hr />

<p>The main attraction is Parque Terra Nostra, which is a botanical garden with several hot spring baths included.
One of these is actually a gigantic pool in which you can swim freely.</p>

<p>  <hy-img root-margin="512px"  src="/assets/img/onsen_terra_nostra.jpg" alt="Terra Nostra" >    <noscript><img data-ignore  src="/assets/img/onsen_terra_nostra.jpg" alt="Terra Nostra" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img></p>

<p>The park itself is well worth seeing, but that onsen pool is truly a rare sight to behold! 
It’s extremely satisfying to swim in the thermal water and you can find temperature differences throughout the pool.</p>

<hr />

<p>Outside Japan, hot spring temperatures are usually lower and you rarely encounter foot-onsens, 
i.e. hot springs which you put your feet into.
Furnas actually has one of those! It’s called Poça da Tia Silvina, and it’s exceptionally hot.
This foot onsen it located on the river bank in Furnas and is free. 
Recommend to grab some desserts from the Glória Moniz bakery and come down here to relax.
Might have to bring an umbrella :)</p>

<p>Lastly, they also make food with the thermal heat, which results in a dish called Cozido das Furnas. 
This is definitely worth trying! Amazing to see the many use cases thermal heat can fit into.</p>

<h1 id="conclusion">Conclusion</h1>
<p>Hot springs are amazing and I wish they could be found anywhere. 
In recent years I found a few hot springs that can make up for their general absence throughout Europe.
I hope to visit many more in other parts of the world.</p>]]></content><author><name>Andreas Volkmann</name><email>avolkmann@me.com</email></author><category term="blog" /><category term="onsen" /><summary type="html"><![CDATA[Explore these fascinating hot springs around the globe.]]></summary></entry><entry><title type="html">⚡ Power Automate - Iteration Performance</title><link href="https://andreasvolkmann.github.io//blog/software/2022-04-09-dataverse-perf-flow-loops/" rel="alternate" type="text/html" title="⚡ Power Automate - Iteration Performance" /><published>2022-04-09T00:00:00-07:00</published><updated>2022-04-09T00:00:00-07:00</updated><id>https://andreasvolkmann.github.io//blog/software/dataverse-perf-flow-loops</id><content type="html" xml:base="https://andreasvolkmann.github.io//blog/software/2022-04-09-dataverse-perf-flow-loops/"><![CDATA[<ol id="markdown-toc">
  <li><a href="#control" id="markdown-toc-control">Control</a></li>
  <li><a href="#data-operations" id="markdown-toc-data-operations">Data Operations</a>    <ol>
      <li><a href="#select" id="markdown-toc-select">Select</a></li>
      <li><a href="#filter" id="markdown-toc-filter">Filter</a></li>
      <li><a href="#change-of-approach" id="markdown-toc-change-of-approach">Change of approach</a></li>
    </ol>
  </li>
  <li><a href="#conclusion" id="markdown-toc-conclusion">Conclusion</a></li>
</ol>

<p>Flows are a great tool for automation and integration,
but whilst the low/no code paradigm aims to make programming more accessible,
it also introduces some pitfalls that are not immediately obvious to both casual and professional programmers.</p>

<p>Performance is a frequently problematic area,
as the restricted Flow development environment makes it hard to see why things are slow
and doesn’t provide many options to address the issues.</p>

<h1 id="control">Control</h1>
<p>One issue I’ve seen come up again and again in Flows is the use of imperative iteration.
  <hy-img root-margin="512px"  src="/assets/img/flow-control.png" alt="Flow control" >    <noscript><img data-ignore  src="/assets/img/flow-control.png" alt="Flow control" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img></p>

<p>In other words, the two control actions <code class="language-plaintext highlighter-rouge">Apply to each</code> and <code class="language-plaintext highlighter-rouge">Do until</code>.
At first glance, they seem like the go-to actions for looping.</p>

<p>Turns out you are better off avoiding them unless absolutely necessary, seeing as the performance is abyssmal.
Consider this simple, bare-bones <code class="language-plaintext highlighter-rouge">Do until</code>, with a single action to increment an integer inside:
  <hy-img root-margin="512px"  src="/assets/img/flow-loop-slow.png" alt="Flow loops are slow" >    <noscript><img data-ignore  src="/assets/img/flow-loop-slow.png" alt="Flow loops are slow" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img></p>

<p>60 iterations took 12 seconds!
This is completely unexpected for someone coming from traditional programming.</p>

<p>When using these control actions, what you’d likely expect to happen behind the scenes is something like the following:</p>
<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="p">&lt;</span> <span class="mi">60</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">i</span><span class="p">++</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This should take mere nanoseconds, so how come it took 12 whole seconds in the Flow?</p>

<p>There is significant overhead associated with each iteration, leading to long durations and potential timeouts.
Unlike a traditional while or for loop, the control actions spawn a sub process for each iteration.</p>

<p>Now imagine running this with 1000s of iterations. You can freeze your whole system if you’re not careful here.</p>

<p>As you can see, simple loops are very counter-intuitive in Flows.
In order to rectify the situation, oftentimes the concurrency is upped.
This does lead to faster execution, but increases the load on the system and can impact quota usage.
  <hy-img root-margin="512px"  src="/assets/img/flow-concurrency.png" alt="Flow concurrency maxed out" >    <noscript><img data-ignore  src="/assets/img/flow-concurrency.png" alt="Flow concurrency maxed out" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img>
Besides, you’ll hit the max eventually.</p>

<p>Surely, there’s gotta be a better way, right? After all, loops are such a fundamental part of any program.</p>

<h1 id="data-operations">Data Operations</h1>
<p>The antidote to the <code class="language-plaintext highlighter-rouge">Control loop</code> slowness comes in the form of <code class="language-plaintext highlighter-rouge">Data operations</code>.</p>

<p>  <hy-img root-margin="512px"  src="/assets/img/flow-data-operations.png" alt="Flow data operations are fast" >    <noscript><img data-ignore  src="/assets/img/flow-data-operations.png" alt="Flow data operations are fast" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img></p>

<p>Data operations are to control loops as declarative programming is to imperative.
They are basically higher order functions.</p>

<p>Let’s see some quick examples as proof of their speed.</p>

<h2 id="select">Select</h2>
<p>One example could be the transformation of a set of row objects to an array of their ids.
  <hy-img root-margin="512px"  src="/assets/img/flow-loop.png" alt="Flow loop" >    <noscript><img data-ignore  src="/assets/img/flow-loop.png" alt="Flow loop" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img>
The imperative <code class="language-plaintext highlighter-rouge">Apply to each</code> loop takes ~3 minutes for 300 records,
even though the individual append operation takes less than a second.
The functional <code class="language-plaintext highlighter-rouge">Select</code> operation completes within 1 second.</p>

<h2 id="filter">Filter</h2>
<p>Looping over 100 items, even without any logic in the condition, takes a significant amount of time.
  <hy-img root-margin="512px"  src="/assets/img/flow-filter.png" alt="Flow filter" >    <noscript><img data-ignore  src="/assets/img/flow-filter.png" alt="Flow filter" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img></p>

<p>The functional <code class="language-plaintext highlighter-rouge">Filter array</code> operation completes in less than a second, as we would expect from such a workload.</p>

<hr />

<p>As we can see, data operations have the performance characteristics
which we originally expected to see form the imperative approach.</p>

<p>There is hardly ever a reason not to use them, as long as the functional outcome is the same.
One area that cannot be covered is the integration with external systems. 
Making a call to a system that expects a single data record cannot be optimized.</p>

<p>If you own the API, you can attempt a batch approach instead of one-by-one calls,
and parse the data with data operations.</p>

<h2 id="change-of-approach">Change of approach</h2>
<p>As with the transition from imperative to functional,
a different mindset is often required to effectively utilize data operations.</p>

<p>I encourage you to leave complex control structures and mutation behind,
and instead focus on pure, higher-order functions processing collections rather than single records.</p>

<p>The best way to learn is to take up languages that naturally promote functional concepts. 
Although most mainstream languages support higher order functions by now,
I personally learned a lot from diving into Kotlin,
which I believe is the perfect bridge between imperative OO and functional.</p>

<h1 id="conclusion">Conclusion</h1>
<p>As a general guideline:
Avoid looping over arrays of even medium size (100s).
Prefer data operations like <code class="language-plaintext highlighter-rouge">Select</code>, <code class="language-plaintext highlighter-rouge">Compose</code>, <code class="language-plaintext highlighter-rouge">Join</code>, <code class="language-plaintext highlighter-rouge">Filter</code> to manipulate and transform multiple records at once.
(Analogous to functional &gt; imperative in OO)</p>

<p>Reserve the control loops for situations where data operations cannot be used.</p>]]></content><author><name>Andreas Volkmann</name><email>avolkmann@me.com</email></author><category term="blog" /><category term="software" /><summary type="html"><![CDATA[Addressing common performance bottlenecks in Flows. There is more to loops than meets the eye. Once again, functional beats imperative.]]></summary></entry><entry><title type="html">Language features across the boundary</title><link href="https://andreasvolkmann.github.io//blog/2021-07-25-topic-markers-in-language-design/" rel="alternate" type="text/html" title="Language features across the boundary" /><published>2021-07-25T00:00:00-07:00</published><updated>2021-07-25T00:00:00-07:00</updated><id>https://andreasvolkmann.github.io//blog/topic-markers-in-language-design</id><content type="html" xml:base="https://andreasvolkmann.github.io//blog/2021-07-25-topic-markers-in-language-design/"><![CDATA[<ol id="markdown-toc">
  <li><a href="#topic-markers" id="markdown-toc-topic-markers">Topic markers</a>    <ol>
      <li><a href="#implicit-topics" id="markdown-toc-implicit-topics">Implicit topics</a></li>
    </ol>
  </li>
  <li><a href="#programming-analog" id="markdown-toc-programming-analog">Programming analog</a>    <ol>
      <li><a href="#extension-functions-with-receivers" id="markdown-toc-extension-functions-with-receivers">Extension functions with receivers</a>        <ol>
          <li><a href="#further-parallels" id="markdown-toc-further-parallels">Further parallels</a></li>
        </ol>
      </li>
    </ol>
  </li>
  <li><a href="#conclusion" id="markdown-toc-conclusion">Conclusion</a></li>
</ol>

<p>In western languages we are used to repeatedly re-declare the topic we are talking about.
There is hardly a sentence without a pronoun,
and we often have to find <a href="https://owl.purdue.edu/owl/general_writing/academic_writing/sentence_variety/for_repeated_subjects_or_topics.html">creative ways</a>
to reduce repetition, in order not to sound dry and robotic.</p>

<p>Imagine a typical conversation between person <code class="language-plaintext highlighter-rouge">A</code> and <code class="language-plaintext highlighter-rouge">B</code>:</p>
<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">A</span><span class="pi">:</span> <span class="s">How is your new teacher?</span>
<span class="na">B</span><span class="pi">:</span> <span class="s">I don't like him. He's too strict.</span>
<span class="na">A</span><span class="pi">:</span> <span class="s">Is he worse than Mr. X?</span>
<span class="na">B</span><span class="pi">:</span> <span class="s">No, but he still thinks it's the 80s.</span>
<span class="nn">...</span>
</code></pre></div></div>

<p>This could go on for quite a bit,
but after the first sentence it should be clear to everyone what the topic is.
Then why do we have to repeatedly refer to it?</p>

<p>Think about introducing yourself to an audience.
Nobody is in doubt who you are talking about, 
yet practically every sentence will contain an <code class="language-plaintext highlighter-rouge">I</code> or <code class="language-plaintext highlighter-rouge">my</code>.</p>

<p>Growing up with such a language, this feels normal. 
Although, as developers, we tend to get an allergic reaction when seeing excessive repetition.</p>

<p>Once we discover an elegant alternative, 
we realize that languages like English, German, Danish are really quite verbose. 
They are said to be <a href="https://en.wikipedia.org/wiki/Topic-prominent_language">subject-prominent</a>.</p>

<h1 id="topic-markers">Topic markers</h1>

<p>Some natural languages, like Japanese and Korean, support a feature called <a href="https://en.wikipedia.org/wiki/Topic_marker">topic markers</a>.
They allow you to declare a topic, and then largely omit referencing it throughout the conversation.</p>

<p>Going back to the previous example, once the topic is established, we can stop referring to it.</p>
<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">A</span><span class="pi">:</span> <span class="s">How is new teacher?</span>
<span class="na">B</span><span class="pi">:</span> <span class="s">Don't like. Too strict.</span>
<span class="na">A</span><span class="pi">:</span> <span class="s">Worse than Mr. X?</span>
<span class="na">B</span><span class="pi">:</span> <span class="s">No, but still thinks it's the 80s.</span>
<span class="nn">...</span>
</code></pre></div></div>

<p>This sounds unnatural in English, but is the default in Japanese.
In fact, we can omit nearly all pronouns, as they are usually inferred from the context:</p>
<ul>
  <li>When <code class="language-plaintext highlighter-rouge">A</code> asks <code class="language-plaintext highlighter-rouge">B</code> a question, <code class="language-plaintext highlighter-rouge">B</code> is not in doubt whose teacher <code class="language-plaintext highlighter-rouge">A</code> is talking about.</li>
  <li>When <code class="language-plaintext highlighter-rouge">B</code> states her opinion, both know who about.</li>
  <li>As long as the topic doesn’t change, there is no need to refer to the teacher with pronouns.</li>
</ul>

<h2 id="implicit-topics">Implicit topics</h2>
<p>Context-heavy languages assume a lot of implicit information, allowing for very succinct communication.
Japanese is known for being on the extreme end of the context-heavy scala, 
as almost every sentence will omit some information.</p>

<blockquote>
  <p>In high context cultures many of the words you might think of as essential in another linguistic setting become unnecessary or out of place. Japanese is one such language, where things are often implied by context and mutual understanding.</p>

  <p><a href="https://www.italki.com/article/877/omitting-the-subject-in-japanese?hl=en">Source</a></p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/Japanese_grammar#Thematic_wa">A classic</a> 
is the sentence <code class="language-plaintext highlighter-rouge">僕はウナギだ</code>, which can be interpreted as <code class="language-plaintext highlighter-rouge">I am an eel</code>, which doesn’t make much sense.
The implicit context is that we are in a restaurant, where the sentence is used to state your order, 
as in <code class="language-plaintext highlighter-rouge">I'd like the eel, please</code>.</p>

<p>More generally, you omit pronouns in most conversations.
When talking about yourself, stating your thoughts, or telling a story about your kids, you won’t have to 
 say <code class="language-plaintext highlighter-rouge">I</code> / <code class="language-plaintext highlighter-rouge">my</code>. Once you open your mouth, it is clear that you are the topic.
When seeing a colleague and asking a question, you won’t say <code class="language-plaintext highlighter-rouge">You</code>. 
The other person understands that he is the one being asked.</p>

<p>Once I went to a book store, where a band was playing. 
Just as I entered, they stopped playing, 
and I went up to one of the members to ask whether they would continue later.
The entire conversation was:</p>
<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Me</span><span class="pi">:</span> <span class="s">もう終わった？</span> <span class="c1"># ~ Already finished?</span>
<span class="na">He</span><span class="pi">:</span> <span class="s">まだ。</span>       <span class="c1"># ~ Still.</span>
</code></pre></div></div>

<p>I was taken aback by the curtness of his answer, but this is really quite common.</p>

<h1 id="programming-analog">Programming analog</h1>

<p>The first similar concept that comes to mind is a plain class, 
from which we can reference other members of the class without qualification.</p>

<p>As mentioned, in Japanese you can omit declaring yourself as the topic.
Let’s imagine a class about ourselves, called <code class="language-plaintext highlighter-rouge">I</code>.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">I</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">fun</span> <span class="nf">think</span><span class="p">(</span><span class="n">about</span><span class="p">:</span> <span class="nc">String</span><span class="p">)</span> <span class="p">{}</span>
    
    <span class="k">fun</span> <span class="nf">say</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">think</span><span class="p">(</span><span class="s">"No more subject!"</span><span class="p">)</span>
        <span class="nf">think</span><span class="p">(</span><span class="s">"Context is awesome!"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>As opposed to:</p>
<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">i</span> <span class="p">=</span> <span class="nc">I</span><span class="p">()</span>

<span class="k">fun</span> <span class="nf">say</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">i</span><span class="p">.</span><span class="nf">think</span><span class="p">(</span><span class="s">"therefore I am"</span><span class="p">)</span>
    <span class="n">i</span><span class="p">.</span><span class="nf">think</span><span class="p">(</span><span class="s">"repetition is boring"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Generally, good design will produce classes with low subject repetition.
Similar to how we organize our prose to minimize repetition and keep the reader engaged. 
If we find ourselves frequently referring to the same subject, 
then that is a sign that the code belongs in a (topic) class.</p>

<p>This works well when we own the class, but what if the topic is out of our control?</p>

<h2 id="extension-functions-with-receivers">Extension functions with receivers</h2>

<p>Have you ever had to write a function which operates on an external type, like the below?</p>
<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">mutate</span><span class="p">(</span><span class="k">external</span><span class="p">:</span> <span class="nc">External</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">external</span><span class="p">.</span><span class="n">name</span> <span class="p">=</span> <span class="s">"Test"</span>
    <span class="k">external</span><span class="p">.</span><span class="n">age</span> <span class="p">=</span> <span class="mi">10_000</span>
    <span class="k">external</span><span class="p">.</span><span class="n">location</span> <span class="p">=</span> <span class="nf">getCurrentLocation</span><span class="p">()</span>
    <span class="k">external</span><span class="p">.</span><span class="n">status</span> <span class="p">=</span> <span class="o">..</span><span class="p">.</span>
    <span class="k">external</span><span class="p">.</span><span class="n">yetAnotherField</span> <span class="p">=</span> <span class="o">..</span><span class="p">.</span> 
    <span class="c1">/// 10 more fields to set</span>
<span class="p">}</span>
</code></pre></div></div>
<p>This is super annoying. We basically want a way to declare <code class="language-plaintext highlighter-rouge">external</code> as our topic, 
and then stop referring to it in every single line, as if it was a function of the class itself.</p>

<p>In Kotlin, <a href="https://kotlinlang.org/docs/extensions.html#extension-functions">extension functions</a> 
are declared by defining a receiver type for the function.
Within its scope, the receiver becomes <code class="language-plaintext highlighter-rouge">this</code>, and can be omitted.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nc">External</span><span class="p">.</span><span class="nf">mutate</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">name</span> <span class="p">=</span> <span class="s">"Test"</span>
    <span class="n">age</span> <span class="p">=</span> <span class="mi">10_000</span>
    <span class="n">location</span> <span class="p">=</span> <span class="nf">getCurrentLocation</span><span class="p">()</span>
    <span class="n">status</span> <span class="p">=</span> <span class="o">..</span><span class="p">.</span>
    <span class="o">..</span><span class="p">.</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Such receivers can be thought of as topic markers, 
indicating that the following block of code will invoke the topic without explicitly referencing it.</p>

<p>The standard library contains generic helper functions, like <code class="language-plaintext highlighter-rouge">apply</code> to facilitate this inline.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">StringBuilder</span><span class="p">().</span><span class="nf">apply</span> <span class="p">{</span>
    <span class="nf">append</span><span class="p">(</span><span class="s">"Hello "</span><span class="p">)</span>
    <span class="n">names</span><span class="p">.</span><span class="nf">forEach</span> <span class="p">{</span> <span class="nf">append</span><span class="p">(</span><span class="n">it</span><span class="p">).</span><span class="nf">append</span><span class="p">(</span><span class="s">","</span><span class="p">)</span> <span class="p">}</span>
    <span class="nf">setLength</span><span class="p">(</span><span class="n">length</span> <span class="p">-</span> <span class="mi">1</span><span class="p">)</span>
    <span class="nf">append</span><span class="p">(</span><span class="s">"!"</span><span class="p">)</span>
<span class="p">}.</span><span class="nf">toString</span><span class="p">()</span> <span class="c1">// Hello A, B!</span>
</code></pre></div></div>

<p>Without <code class="language-plaintext highlighter-rouge">apply</code>, we would have to declare the subject in every line, sometimes even twice.
We could actually create a similar helper for the Japanese topic marker <code class="language-plaintext highlighter-rouge">は</code>:</p>
<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">infix</span> <span class="k">fun</span> <span class="p">&lt;</span><span class="nc">T</span><span class="p">&gt;</span> <span class="nc">T</span><span class="p">.</span><span class="err">は(</span><span class="nf">block</span><span class="p">:</span> <span class="nc">T</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="nc">Unit</span><span class="p">)</span> <span class="p">=</span> <span class="nf">block</span><span class="p">()</span>

<span class="nc">RestaurantOrder</span><span class="p">()</span> <span class="err">は</span> <span class="p">{</span> <span class="nf">unagi</span><span class="p">()</span> <span class="p">}</span>
</code></pre></div></div>

<p>Receivers are frequently leveraged to enable custom DSLs / <a href="https://kotlinlang.org/docs/type-safe-builders.html">type-safe builders</a>. 
For example, a type-safe way to build html in code:</p>
<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">html</span> <span class="p">{</span>
    <span class="nf">header</span> <span class="p">{</span>
        <span class="nf">stylesheet</span><span class="p">(</span><span class="n">color</span> <span class="p">=</span> <span class="s">"blue"</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nf">body</span> <span class="p">{</span>
        <span class="nf">form</span> <span class="p">{</span>
            <span class="nf">textColumn</span><span class="p">(</span><span class="s">"name"</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="nf">button</span><span class="p">(</span><span class="s">"OK"</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nf">footer</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Another cool thing here is the notion of nested receivers / topics, just as in natural language.
The <code class="language-plaintext highlighter-rouge">textColumn</code> only makes sense in the context of a form in a body in html.</p>

<p>Going back to the eel example, how could we express this in code?
First, we can always assume an implicit context of <code class="language-plaintext highlighter-rouge">I</code>.
Next, we are in a restaurant and, facing the waiter, it is clear that we intend to order food.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">I</span> <span class="p">{</span>
    <span class="k">fun</span> <span class="nc">RestaurantOrder</span><span class="p">.</span><span class="nf">unagi</span><span class="p">()</span> <span class="p">=</span> <span class="nf">order</span><span class="p">(</span><span class="nc">Menu</span><span class="p">.</span><span class="nc">EelOnRice</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="p">}</span>

<span class="nc">I</span> <span class="p">{</span> <span class="c1">// implicit I</span>
    <span class="nf">restaurant</span> <span class="p">{</span> <span class="c1">// when in restaurant</span>
        <span class="nf">order</span> <span class="p">{</span> <span class="c1">// when about to order</span>
            <span class="nf">unagi</span><span class="p">()</span> <span class="c1">// when in the right context, a single word is sufficient</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Notice that we can define <a href="https://kotlinlang.org/docs/extensions.html#declaring-extensions-as-members">local extensions</a>! 
This really allows us to express the concept of sub-topics, 
i.e. the unagi restaurant order only applies to me.</p>

<h3 id="further-parallels">Further parallels</h3>
<p>In Japanese, adding back the omitted subject references still leads to grammatically correct sentences,
but they will be perceived as awkward, and you will have trouble making yourself understood.
This is analogous to unclean code with excessive duplication, or unnecessary qualifications.
For others reading your code, this noise is an impairment to understanding your true intent.</p>

<h1 id="conclusion">Conclusion</h1>
<p>In programming, topics are generally handled by defining classes of cohesive members, 
which can operate on the topic without explicit references. 
Kotlin adds the magic by allowing the same behavior on external types via extensions.
Bonus points for local extensions!</p>

<p>Natural languages like Japanese have a special topic marker particle 
which feels similar to defining the receiver on an extension function.
In context-heavy languages we can omit a lot of implicit information, 
often leading to much shorter, concise sentences.</p>

<p>To me, both Kotlin and Japanese have a sense of elegance, 
as it is super easy to produce highly expressive and concise output.</p>]]></content><author><name>Andreas Volkmann</name><email>avolkmann@me.com</email></author><category term="blog" /><summary type="html"><![CDATA[Topic markers and context can help keep you DRY]]></summary></entry><entry><title type="html">Clean Architecture with ArchUnit</title><link href="https://andreasvolkmann.github.io//blog/software/2021-04-24-clean-arch-unit/" rel="alternate" type="text/html" title="Clean Architecture with ArchUnit" /><published>2021-04-24T00:00:00-07:00</published><updated>2021-04-24T00:00:00-07:00</updated><id>https://andreasvolkmann.github.io//blog/software/clean-arch-unit</id><content type="html" xml:base="https://andreasvolkmann.github.io//blog/software/2021-04-24-clean-arch-unit/"><![CDATA[<ol id="markdown-toc">
  <li><a href="#setup" id="markdown-toc-setup">Setup</a></li>
  <li><a href="#rules" id="markdown-toc-rules">Rules</a></li>
  <li><a href="#conclusion" id="markdown-toc-conclusion">Conclusion</a></li>
</ol>

<p>In a <a href="/blog/2020-02-20-spring-kotlin-gradle-aop">previous post</a>
I discussed ways in which AOP can help in defining our architecture, 
even allowing us to verify architectural rules at compile time.</p>

<p>While this approach certainly does work, it has a few drawbacks, like its reliance on 
AOP, which is not always an option. 
Furthermore, the way these rules are defined is slightly unnatural.</p>

<p>A more idiomatic way of automatically verifying one’s architecture is <a href="https://www.archunit.org/">ArchUnit</a>,
which enables us to define our rules as unit tests.</p>

<p>Originally a Java library, the project has since been ported to C#, 
which makes sense, considering <s>Java</s> Kotlin and C# are the same language.
If a truly useful library is created in either of these, 
it will eventually be ported to the others, 
just like for <a href="https://en.wikipedia.org/wiki/AspectJ">AspectJ</a> we now got <a href="https://www.postsharp.net/">PostSharp</a>.</p>

<p>Anyway, this is convenient for me, 
since I wanted to take a look at enforcing a clean architecture in C# today. 
(Please read <a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html">Uncle Bob’s post</a>)
<a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html">  <hy-img root-margin="512px"  src="/assets/img/CleanArchitecture.jpg" alt="Overview of the Clean Architecture" >    <noscript><img data-ignore  src="/assets/img/CleanArchitecture.jpg" alt="Overview of the Clean Architecture" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img></a></p>

<p>In the Java ArchUnit, there is out of the box support for both <code class="language-plaintext highlighter-rouge">layered</code> and <code class="language-plaintext highlighter-rouge">onion</code> architectures, 
but not in the dotnet ports.</p>

<p>I won’t be going for a full-blown onion / clean arch as my purpose is to slowly evolve 
and improve the architecture of my project. Taking things from 0 to 100 in one step is 
likely not gonna benefit anyone, and it is easier to adapt to small, incremental changes.
So, while the end goal is a clean architecture, 
for now I just want to implement some simple layer checks, 
similar to the ones shown in the image below.</p>

<p>  <hy-img root-margin="512px"  src="/assets/img/layer-check.png" alt="Overview of the Clean Architecture" >    <noscript><img data-ignore  src="/assets/img/layer-check.png" alt="Overview of the Clean Architecture" /></noscript>    <span class="loading" slot="loading" hidden>      <span class="icon-cog"></span>    </span>  </hy-img></p>

<h2 id="setup">Setup</h2>

<p>I found two candidates for ArchUnit-style tests:</p>
<ul>
  <li><a href="https://github.com/TNG/ArchUnitNET">ArchUnitNET</a></li>
  <li><a href="https://github.com/BenMorris/NetArchTest">NetArchTest</a></li>
</ul>

<p>I decided to go with the former, as it is from TNG, the same team as the original library.</p>

<p>After installing, I noticed there is no assert support for <code class="language-plaintext highlighter-rouge">MSTest</code>, 
so I recommend to just copy the related classes from <a href="https://github.com/TNG/ArchUnitNET/tree/master/ArchUnitNET.xUnit">the xUnit folder</a>.</p>

<p><a href="https://github.com/AndreasVolkmann/archNet/tree/master/TestProject1/Arch">Here</a> is what I ended up with.</p>

<h2 id="rules">Rules</h2>

<p>The individual layers can be defined like this:</p>
<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">var</span> <span class="n">serviceLayer</span>     <span class="p">=</span> <span class="nf">Types</span><span class="p">().</span><span class="nf">That</span><span class="p">().</span><span class="nf">ResideInNamespace</span><span class="p">(</span><span class="s">".Service"</span><span class="p">);</span>
<span class="kt">var</span> <span class="n">controllerLayer</span>  <span class="p">=</span> <span class="nf">Types</span><span class="p">().</span><span class="nf">That</span><span class="p">().</span><span class="nf">ResideInNamespace</span><span class="p">(</span><span class="s">".Controller"</span><span class="p">);</span>
<span class="kt">var</span> <span class="n">peristenceLayer</span>  <span class="p">=</span> <span class="nf">Types</span><span class="p">().</span><span class="nf">That</span><span class="p">().</span><span class="nf">ResideInNamespace</span><span class="p">(</span><span class="s">".Repository"</span><span class="p">);</span>
</code></pre></div></div>

<p>Let’s start with our first rule: 
None of our code should depend on any controller / inbound port.</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">TestMethod</span><span class="p">]</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">LayeredArch_Controller</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">rule</span> <span class="p">=</span> <span class="nf">Types</span><span class="p">().</span><span class="nf">That</span><span class="p">().</span><span class="nf">AreNot</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">controllerLayer</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">Should</span><span class="p">().</span><span class="nf">NotDependOnAny</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">controllerLayer</span><span class="p">);</span>

    <span class="n">rule</span><span class="p">.</span><span class="nf">Check</span><span class="p">(</span><span class="n">Architecture</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The next rule prevents access from the persistence layer to the service layer.</p>
<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Types</span><span class="p">().</span><span class="nf">That</span><span class="p">().</span><span class="nf">Are</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">peristenceLayer</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">Should</span><span class="p">().</span><span class="nf">NotDependOnAny</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">serviceLayer</span><span class="p">);</span>
</code></pre></div></div>

<p>And lastly, only allow the service layer to access the persistence layer.</p>
<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Types</span><span class="p">().</span><span class="nf">That</span><span class="p">().</span><span class="nf">AreNot</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">serviceLayer</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">Should</span><span class="p">().</span><span class="nf">NotDependOnAny</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">peristenceLayer</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The complete test class is available <a href="https://github.com/AndreasVolkmann/archNet/blob/master/TestProject1/Arch/ArchitectureTests.cs">here</a>.</p>

<h2 id="conclusion">Conclusion</h2>

<p>ArchUnit provides an elegant way of defining architectural rules, helping you enforce
your design. 
Whilst the AOP compile-time approach is great, too, I prefer an AOP-independent solution.</p>

<p>It would be great to have the layer and onion dsl ported to C#, too.</p>

<p>I will be experimenting with the layers and slowly approach a clean architecture.</p>]]></content><author><name>Andreas Volkmann</name><email>avolkmann@me.com</email></author><category term="blog" /><category term="software" /><summary type="html"><![CDATA[Enforcing a layered architecture with tests]]></summary></entry></feed>